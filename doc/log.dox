/**
\defgroup qilog qi::log
  \brief logging facilities (with rt support) \n
         See \ref qilogguide for a global overview of the logging system. \n

  How to use log:
  \code
  #include <cstdlib>  //for atexit
  #include <qi/log.hpp>
  void main() {
    // first init the log system
    qi::log::init();
    atexit(qi::log::destroy);

    // c syntax
    qiLogInfo("foo.bar", "%s kick %s" , "foo", "bar");
    qiLogInfo("foo.bar", "%s punch %s", "bar", "foo");
    qiLogWarning("pif.paf", "pif kiss paf %d time", 42);

    // c++ syntax
    qiLogInfo("tic.tac") << "tic, " << "tac " << 42 << " times";
    qiLogVerbose("foo.bar") << "bar punch " << "foo";
  }
  \endcode

  \warning You should call qi::log::init at the start of your program
           and register a handler when the program exit to destroy the logger.


\page qilogguide qi::log Developer Guide

go to the \ref qilog API reference.

\section Overview

\subsection OverviewLog New logs system

New logs goals are to improve and simplify how to use and read them.

\subsection hierarchicalcategory Hierarchical Category
There is hierarchical category like in python.
for example:
    - qi.core.client
    - qi.audio.tts
    - qi.audio.asr
    - ...

This allow easy log filtering. Add improve the readablilty into logs GUI.

\subsection handlers Handlers
The default handler log to console. The color is enable on tty.
The handler can be added or deleted. You just need to give a delegate to a log function with the following prototype:
\verbatim
void logfct(const qi::log::LogLevel verb,
            const char              *category,
            const char              *msg,
            const char              *file = "",
            const char              *fct = "",
            const int               line = 0);
\endverbatim
Then you can add the handler with addLogHandler(name, fctLog)
\verbatim
addLogHandler("nameofloghandler", logfct);
\endverbatim

and remove it with removeLogHandler(name).

\verbatim
addLogHandler("nameofloghandler");
\endverbatim

\subsection verbosity Verbosity
There is now 7 logs levels that you can change using --log-level (-L) [log_level_number] option in order form 0 to 6:
      - silent: hide logs.
      - fatal: This one is used before exit the program if a fatal error occured,
      - error: classical error,
      - warning: useful to warn user,
      - info: useful to user informations, logs level by default (also show all lower log level).
      - verbose: not mandatory but useful to user informations, not show by default. If you want them you need to use --verbose (-v) option on naoqi command line.
      - debug: useful to developer informations. Not compile on release. Show on debug comilaption using --debug (-d) option on naoqi command line.

Example printing only error and lower log levels:
\verbatim
$ ./a.out -L 2
\endverbatim

Output:
\verbatim
I've just finished to log!
[FATAL] ...log.example.1: 41
[ERROR] ...log.example.1: 42
[FATAL] ...log.example.2: f4
[ERROR] ...log.example.2: e4
[FATAL] ...log.example.3: 21f4
[ERROR] ...log.example.3: 21e4
[ERROR] ...log.example.4: Where is nao? - Nao is in the kitchen. - How many are they? 42
\endverbatim

\subsection codelocation Code Location
Code location is supported. You can get some information where is the logs call:
     - line,
     - function,
     - file.

This is an option. You can get the location using --context (-c) on noaqi command line.

Example printing context logs:
\verbatim
$ ./a.out -c
\endverbatim

Output:

\verbatim
I've just finished to log!
[FATAL] ...log.example.1: log_example.cpp(91) main 41
[ERROR] ...log.example.1: log_example.cpp(92) main 42
[WARN ] ...log.example.1: log_example.cpp(93) main 43
[INFO ] ...log.example.1: log_example.cpp(94) main 44
[FATAL] ...log.example.2: log_example.cpp(98) main f4
[ERROR] ...log.example.2: log_example.cpp(99) main e4
[WARN ] ...log.example.2: log_example.cpp(100) main w4
[INFO ] ...log.example.2: log_example.cpp(101) main i4
[FATAL] ...log.example.3: log_example.cpp(105) main 21f4
[ERROR] ...log.example.3: log_example.cpp(106) main 21e4
[WARN ] ...log.example.3: log_example.cpp(107) main 21w4
[INFO ] ...log.example.3: log_example.cpp(108) main 21i4
[WARN ] ...log.example.4: log_example.cpp(115) main Oups my buffer is too bad: badcafe
[ERROR] ...log.example.4: log_example.cpp(118) main Where is nao? - Nao is in the kitchen. - How many are they? 42
[INFO ] ...log.example.4: log_example.cpp(124) main 41 42 43 44
\endverbatim

\subsection asynchronouslog Asynchronous log
Log are asynchronous, we dont want to waste time in log, furthermore log can do networking. The handling of the log output is in a separated thread.

There is a way to disable asynchronous. Start naoqi with --synchronous-log command line option. Becarefull, it will slow down naoqi if you have lots of handlers.

Logs may be asynchronous, but they are actually being displayed in their request order.

Example printing synchronous logs:
\verbatim
$ ./a.out --synchronous-log
\endverbatim

Output:

\verbatim
[FATAL] ...log.example.1: 41
[ERROR] ...log.example.1: 42
[WARN ] ...log.example.1: 43
[INFO ] ...log.example.1: 44
[FATAL] ...log.example.2: f4
[ERROR] ...log.example.2: e4
[WARN ] ...log.example.2: w4
[INFO ] ...log.example.2: i4
[FATAL] ...log.example.3: 21f4
[ERROR] ...log.example.3: 21e4
[WARN ] ...log.example.3: 21w4
[INFO ] ...log.example.3: 21i4
[WARN ] ...log.example.4: Oups my buffer is too bad: badcafe
[ERROR] ...log.example.4: Where is nao? - Nao is in the kitchen. - How many are they? 42
[INFO ] ...log.example.4: 41 42 43 44
I've just finished to log!
\endverbatim

\a "I've just finished to log!" is print after everything else.


\subsection compat Compat
- allog should continue working.
- allog API should remain identical.

\subsection options Options
- --log-level (-L) [log_level_number]: change verbosity of logs (0: silent, 1: fatal, 2: error, 3: warning, 4: info, 5: verbose, 6: debug),
- --verbose (-v): show verbose logs level and lower,
- --debug (-d): show debug logs level and lower,
- --quiet (-q): does not show any logs.
- --context (-c): show code location, file(line) function,
- --synchronous-log: make synchronous logs.

\subsection link Link
qi::log documentation.

\subsection example Example
\include log_example.cpp
*/
