
/*
* AUTOGENERATED CODE, DO NOT EDIT
*
*  Author(s):
*  - Chris Kilner  <ckilner@aldebaran-robotics.com>
*  - Cedric Gestes <gestes@aldebaran-robotics.com>
*
*  Copyright (C) 2010, 2012 Aldebaran Robotics
*/

#pragma once
#ifndef _QI_MESSAGING_OBJECT_HXX_
#define _QI_MESSAGING_OBJECT_HXX_

#include <qimessaging/buffer.hpp>

namespace qi {

  /// <summary> Calls a method </summary>
  /// <returns> The response </returns>
  template <typename R>
  qi::Future<R> Object::call(const std::string& method) {
    //will be deleted by metaCall
    qi::FunctorReturnPromise<R>      *promise = new qi::FunctorReturnPromise<R>();
    qi::Future<R>                     future;
    qi::Buffer                       *breq = new qi::Buffer();
    qi::DataStream                    ds(breq);
    qi::FunctorParameters             request(breq);

    R (*f)()  = 0;
    std::string signature(method);
    signature += "::";
    signatureFromObject::value(f, signature);
    future = promise->future();
    metaCall(metaObject()._methodsNameToIdx[method], signature, request, promise);
    return future;
  }

  /// <summary> Calls a method </summary>
  /// <returns> The response </returns>
  template <typename R, typename P0>
  qi::Future<R> Object::call(const std::string& method, const P0 &p0) {
    //will be deleted by metaCall
    qi::FunctorReturnPromise<R>      *promise = new qi::FunctorReturnPromise<R>();
    qi::Future<R>                     future;
    qi::Buffer                       *breq = new qi::Buffer();
    qi::DataStream                    ds(breq);
    qi::FunctorParameters             request(breq);

    R (*f)(const P0 &p0)  = 0;
    std::string signature(method);
    signature += "::";
    signatureFromObject::value(f, signature);
    ds << p0;
    future = promise->future();
    metaCall(metaObject()._methodsNameToIdx[method], signature, request, promise);
    return future;
  }

  /// <summary> Calls a method </summary>
  /// <returns> The response </returns>
  template <typename R, typename P0, typename P1>
  qi::Future<R> Object::call(const std::string& method, const P0 &p0, const P1 &p1) {
    //will be deleted by metaCall
    qi::FunctorReturnPromise<R>      *promise = new qi::FunctorReturnPromise<R>();
    qi::Future<R>                     future;
    qi::Buffer                       *breq = new qi::Buffer();
    qi::DataStream                    ds(breq);
    qi::FunctorParameters             request(breq);

    R (*f)(const P0 &p0, const P1 &p1)  = 0;
    std::string signature(method);
    signature += "::";
    signatureFromObject::value(f, signature);
    ds << p0;
    ds << p1;
    future = promise->future();
    metaCall(metaObject()._methodsNameToIdx[method], signature, request, promise);
    return future;
  }

  /// <summary> Calls a method </summary>
  /// <returns> The response </returns>
  template <typename R, typename P0, typename P1, typename P2>
  qi::Future<R> Object::call(const std::string& method, const P0 &p0, const P1 &p1, const P2 &p2) {
    //will be deleted by metaCall
    qi::FunctorReturnPromise<R>      *promise = new qi::FunctorReturnPromise<R>();
    qi::Future<R>                     future;
    qi::Buffer                       *breq = new qi::Buffer();
    qi::DataStream                    ds(breq);
    qi::FunctorParameters             request(breq);

    R (*f)(const P0 &p0, const P1 &p1, const P2 &p2)  = 0;
    std::string signature(method);
    signature += "::";
    signatureFromObject::value(f, signature);
    ds << p0;
    ds << p1;
    ds << p2;
    future = promise->future();
    metaCall(metaObject()._methodsNameToIdx[method], signature, request, promise);
    return future;
  }

  /// <summary> Calls a method </summary>
  /// <returns> The response </returns>
  template <typename R, typename P0, typename P1, typename P2, typename P3>
  qi::Future<R> Object::call(const std::string& method, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3) {
    //will be deleted by metaCall
    qi::FunctorReturnPromise<R>      *promise = new qi::FunctorReturnPromise<R>();
    qi::Future<R>                     future;
    qi::Buffer                       *breq = new qi::Buffer();
    qi::DataStream                    ds(breq);
    qi::FunctorParameters             request(breq);

    R (*f)(const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3)  = 0;
    std::string signature(method);
    signature += "::";
    signatureFromObject::value(f, signature);
    ds << p0;
    ds << p1;
    ds << p2;
    ds << p3;
    future = promise->future();
    metaCall(metaObject()._methodsNameToIdx[method], signature, request, promise);
    return future;
  }

  /// <summary> Calls a method </summary>
  /// <returns> The response </returns>
  template <typename R, typename P0, typename P1, typename P2, typename P3, typename P4>
  qi::Future<R> Object::call(const std::string& method, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4) {
    //will be deleted by metaCall
    qi::FunctorReturnPromise<R>      *promise = new qi::FunctorReturnPromise<R>();
    qi::Future<R>                     future;
    qi::Buffer                       *breq = new qi::Buffer();
    qi::DataStream                    ds(breq);
    qi::FunctorParameters             request(breq);

    R (*f)(const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4)  = 0;
    std::string signature(method);
    signature += "::";
    signatureFromObject::value(f, signature);
    ds << p0;
    ds << p1;
    ds << p2;
    ds << p3;
    ds << p4;
    future = promise->future();
    metaCall(metaObject()._methodsNameToIdx[method], signature, request, promise);
    return future;
  }

  /// <summary> Calls a method </summary>
  /// <returns> The response </returns>
  template <typename R, typename P0, typename P1, typename P2, typename P3, typename P4, typename P5>
  qi::Future<R> Object::call(const std::string& method, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5) {
    //will be deleted by metaCall
    qi::FunctorReturnPromise<R>      *promise = new qi::FunctorReturnPromise<R>();
    qi::Future<R>                     future;
    qi::Buffer                       *breq = new qi::Buffer();
    qi::DataStream                    ds(breq);
    qi::FunctorParameters             request(breq);

    R (*f)(const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5)  = 0;
    std::string signature(method);
    signature += "::";
    signatureFromObject::value(f, signature);
    ds << p0;
    ds << p1;
    ds << p2;
    ds << p3;
    ds << p4;
    ds << p5;
    future = promise->future();
    metaCall(metaObject()._methodsNameToIdx[method], signature, request, promise);
    return future;
  }

  /// <summary> Calls a method </summary>
  /// <returns> The response </returns>
  template <typename R, typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6>
  qi::Future<R> Object::call(const std::string& method, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5, const P6 &p6) {
    //will be deleted by metaCall
    qi::FunctorReturnPromise<R>      *promise = new qi::FunctorReturnPromise<R>();
    qi::Future<R>                     future;
    qi::Buffer                       *breq = new qi::Buffer();
    qi::DataStream                    ds(breq);
    qi::FunctorParameters             request(breq);

    R (*f)(const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5, const P6 &p6)  = 0;
    std::string signature(method);
    signature += "::";
    signatureFromObject::value(f, signature);
    ds << p0;
    ds << p1;
    ds << p2;
    ds << p3;
    ds << p4;
    ds << p5;
    ds << p6;
    future = promise->future();
    metaCall(metaObject()._methodsNameToIdx[method], signature, request, promise);
    return future;
  }

  /// <summary> Calls a method </summary>
  /// <returns> The response </returns>
  template <typename R, typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7>
  qi::Future<R> Object::call(const std::string& method, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5, const P6 &p6, const P7 &p7) {
    //will be deleted by metaCall
    qi::FunctorReturnPromise<R>      *promise = new qi::FunctorReturnPromise<R>();
    qi::Future<R>                     future;
    qi::Buffer                       *breq = new qi::Buffer();
    qi::DataStream                    ds(breq);
    qi::FunctorParameters             request(breq);

    R (*f)(const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5, const P6 &p6, const P7 &p7)  = 0;
    std::string signature(method);
    signature += "::";
    signatureFromObject::value(f, signature);
    ds << p0;
    ds << p1;
    ds << p2;
    ds << p3;
    ds << p4;
    ds << p5;
    ds << p6;
    ds << p7;
    future = promise->future();
    metaCall(metaObject()._methodsNameToIdx[method], signature, request, promise);
    return future;
  }

  /// <summary> Calls a method </summary>
  /// <returns> The response </returns>
  template <typename R, typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8>
  qi::Future<R> Object::call(const std::string& method, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5, const P6 &p6, const P7 &p7, const P8 &p8) {
    //will be deleted by metaCall
    qi::FunctorReturnPromise<R>      *promise = new qi::FunctorReturnPromise<R>();
    qi::Future<R>                     future;
    qi::Buffer                       *breq = new qi::Buffer();
    qi::DataStream                    ds(breq);
    qi::FunctorParameters             request(breq);

    R (*f)(const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5, const P6 &p6, const P7 &p7, const P8 &p8)  = 0;
    std::string signature(method);
    signature += "::";
    signatureFromObject::value(f, signature);
    ds << p0;
    ds << p1;
    ds << p2;
    ds << p3;
    ds << p4;
    ds << p5;
    ds << p6;
    ds << p7;
    ds << p8;
    future = promise->future();
    metaCall(metaObject()._methodsNameToIdx[method], signature, request, promise);
    return future;
  }

}
#endif  // _QI_MESSAGING_OBJECT_HXX_
