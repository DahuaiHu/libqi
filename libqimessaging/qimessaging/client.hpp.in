#from codegenerator import *
<%
def generate_argpush_list(count):
    t = "args.push_back(p%(count)d);"
    return generate_list(t, count, sep=" ")
%>
#raw
#pragma once
/*
** $autogen
*
*  Author(s):
*  - Chris Kilner  <ckilner@aldebaran-robotics.com>
*  - Cedric Gestes <gestes@aldebaran-robotics.com>
*
*  Copyright (C) 2010 Aldebaran Robotics
*/


#ifndef _QI_MESSAGING_CLIENT_HPP_
#define _QI_MESSAGING_CLIENT_HPP_

#include <string>
#include <qimessaging/signature.hpp>
#include <qimessaging/serialization.hpp>
#include <boost/scoped_ptr.hpp>

namespace qi {
  namespace detail {
    class ClientImpl;
  }
  class Context;

  /// <summary>
  /// Used to call services that have been added to a server.
  /// If the service is unknown, the master is interrogated
  /// to find the appropriate server.
  /// </summary>
  /// \include example_qi_client.cpp
  /// \ingroup Messaging
  class Client {
  public:
    /// <summary>
    /// Used to call services that have been added to a server.
    /// If the service is unknown, the master is interrogated
    /// to find the appropriate server
    /// </summary>
    /// <param name="name">
    /// The name you want to give to this client
    /// e.g. "client"
    /// </param>
    /// <param name="context">
    /// An optional context that can be used to group or separate
    /// transport resources.
    /// </param>
    Client(const std::string& name = "", qi::Context *context = 0);

    /// <summary> Connect to masterAddress. If no address is specified
    /// the default 127.0.0.1:5555 is used </summary>
    /// <param name="masterAddress"> The master address. e.g 127.0.0.1:5555</param>
    void connect(const std::string &masterAddress = "127.0.0.1:5555");

    virtual ~Client();

    bool isInitialized() const;

#end raw

#for $i in $count
    #if $i != 0
    template <${generate_typename_list($i)}>
    #end if
    void callVoid(const std::string& methodName${generate_param_list($i, begin=True)});

    template <typename RETURN_TYPE${generate_typename_list($i, begin=True)}>
    RETURN_TYPE call(const std::string& methodName${generate_param_list($i, begin=True)});

#end for
  private:
    void xCall(const std::string& signature,
      const qi::Message& request,
            qi::Message& result);
    boost::scoped_ptr<qi::detail::ClientImpl> _impl;
  };
}

#raw
#include <qimessaging/client.hxx>
#endif  // _QI_MESSAGING_CLIENT_HPP_
#end raw
