#from qibuild_code_generator import *
/*
*  $autogen
*
*  Author(s):
*  - Cedric GESTES <gestes@aldebaran-robotics.com>
*
*  Copyright (C) 2010, 2011, 2012 Aldebaran Robotics
*/

#raw
#pragma once
#ifndef _QIMESSAGING_DETAILS_VOIDFUNCTOR_HXX_
#define _QIMESSAGING_DETAILS_VOIDFUNCTOR_HXX_

# include <qimessaging/functor.hpp>

namespace qi {
namespace detail {

#end raw
#for $i in $count

  template <$generate_typename_list($i)>
  class Functor_$i<${generate_type_list($i, end=True)}void> : public Functor
  {
  public:
    typedef void(*FunctionType) ($generate_param_list($i));

    Functor_${i}(FunctionType pFunction)
      : fFunction(pFunction)
    {}

    void operator()($generate_param_list($i)) {
      (*fFunction)($generate_arg_list($i));
    }

    void call(const qi::FunctorParameters &params, qi::FunctorResult result) const {
      QI_FUNCTOR_ASSUME_NBR_PARAMS(params, ${i});
      qi::DataStream dsi(params.buffer());
      #for $j in range($i)
      P$j p$j;
      #end for

      #for $j in range($i)
      dsi >> p$j;
      #end for
      (*fFunction)($generate_callparam_list($i));
    };

  private:
    FunctionType  fFunction;
  };

#end for
#raw
}
}
#endif  // _QIMESSAGING_DETAILS_VOIDFUNCTOR_HXX_
#end raw
