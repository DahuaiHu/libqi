#from qibuild_code_generator import *
/*
* $autogen
*
*  Author(s):
*  - Cedric GESTES <gestes@aldebaran-robotics.com>
*
*  Copyright (C) 2010, 2011, 2012 Aldebaran Robotics
*/

#raw
#pragma once
#ifndef _QIMESSAGING_DETAILS_MEMBERFUNCTOR_HXX_
#define _QIMESSAGING_DETAILS_MEMBERFUNCTOR_HXX_

#include <qimessaging/functor.hpp>

namespace qi {
namespace detail {

#end raw
#for $i in $count
  template <$generate_typename_list($i, end = True) typename C, typename R>
  class MemberFunctor_${i} : public Functor
  {
  public:
    typedef R(C::*FunctionType) ($generate_param_list($i));

    MemberFunctor_${i}(C *pObject, FunctionType pFunction)
      : fObject(pObject),
        fFunction(pFunction)
    {}

    R operator()($generate_param_list($i)) {
      return (R)(fObject->*fFunction)($generate_arg_list($i));
    }

    void call(const qi::FunctorParameters &params, qi::FunctorResult result) const {
      QI_FUNCTOR_ASSUME_NBR_PARAMS(params, ${i});
      qi::DataStream  dsi(params.buffer());
      qi::Buffer      buf;
      qi::DataStream  dso(buf);
      #for $j in range($i)
      P$j p$j;
      #end for

      #for $j in range($i)
      dsi >> p$j;
      #end for
      dso << (fObject->*fFunction)($generate_callparam_list($i));
      result.setValue(buf);
    };
  private:
    C            *fObject;
    FunctionType  fFunction;
  };

#end for
#raw
}
}
#endif  // _QIMESSAGING_DETAILS_MEMBERFUNCTOR_HXX_
#end raw
