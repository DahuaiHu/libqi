#from qibuild_code_generator import *
<%
def generate_argpush_list(count):
    t = "args.push_back(p%(count)d);"
    return generate_list(t, count, sep=" ")
%>
/*
*  $autogen
*
*  Author(s):
*  - Cedric GESTES <gestes@aldebaran-robotics.com>
*  - Chris  Kilner <ckilner@aldebaran-robotics.com>
*
*  Copyright (C) 2010, 2011, 2012 Aldebaran Robotics
*/

#raw
#pragma once
#ifndef _QIMESSAGING_DETAILS_CALLFUNCTOR_HPP_
#define _QIMESSAGING_DETAILS_CALLFUNCTOR_HPP_

#include <qimessaging/functor.hpp>
#include <qimessaging/buffer.hpp>
#end raw

namespace qi
{
#for $i in $count

  template <typename R$generate_typename_list($i, begin = True)>
  qi::Future<R> callFunctor(Functor *f$generate_param_list($i, begin = True)) {
    qi::Buffer            argsBuf;
    qi::DataStream        dsi(&argsBuf);
    qi::FunctorParameters args(&argsBuf);
    qi::FunctorResult     ret;
    qi::Future<R>         future;

    qi::makeFunctorResult<R>(&ret, &future);
    #for $j in range($i)
    dsi << p$j;
    #end for
    f->call(args, ret);
    return future;
  }

#end for
#raw
}
#endif  // _QIMESSAGING_DETAILS_CALLFUNCTOR_HPP_
#end raw
