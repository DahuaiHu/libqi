
#pragma once
/*
*  AUTOGENERATED CODE, DO NOT EDIT
*
*  Author(s):
*  - Cedric GESTES <gestes@aldebaran-robotics.com>
*  - Chris  Kilner <ckilner@aldebaran-robotics.com>
*
*  Copyright (C) 2010 Aldebaran Robotics
*/

#ifndef _QIMESSAGING_FUNCTORS_CALLFUNCTOR_HPP_
#define _QIMESSAGING_FUNCTORS_CALLFUNCTOR_HPP_

#include <qimessaging/functors/functor.hpp>

namespace qi
{

  template <typename R>
  R callFunctor(Functor *f) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);
    f->call(args, ret);
    R r;
    ret >> r;
    return r;
  }

  void callVoidFunctor(Functor *f) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    f->call(args, ret);
  }


  template <typename R, typename P0>
  R callFunctor(Functor *f, const P0 &p0) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    f->call(args, ret);
    R r;
    ret >> r;
    return r;
  }

  template <typename P0>
  void callVoidFunctor(Functor *f, const P0 &p0) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);
    args << p0;
    f->call(args, ret);
  }


  template <typename R, typename P0, typename P1>
  R callFunctor(Functor *f, const P0 &p0, const P1 &p1) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    args << p1;
    f->call(args, ret);
    R r;
    ret >> r;
    return r;
  }

  template <typename P0, typename P1>
  void callVoidFunctor(Functor *f, const P0 &p0, const P1 &p1) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    args << p1;
    f->call(args, ret);
  }


  template <typename R, typename P0, typename P1, typename P2>
  R callFunctor(Functor *f, const P0 &p0, const P1 &p1, const P2 &p2) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    args << p1;
    args << p2;
    f->call(args, ret);
    R r;
    ret >> r;
    return r;
  }

  template <typename P0, typename P1, typename P2>
  void callVoidFunctor(Functor *f, const P0 &p0, const P1 &p1, const P2 &p2) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    args << p1;
    args << p2;
    f->call(args, ret);
  }


  template <typename R, typename P0, typename P1, typename P2, typename P3>
  R callFunctor(Functor *f, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);
    args << p0;
    args << p1;
    args << p2;
    args << p3;
    f->call(args, ret);
    R r;
    ret >> r;
    return r;
  }

  template <typename P0, typename P1, typename P2, typename P3>
  void callVoidFunctor(Functor *f, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    args << p1;
    args << p2;
    args << p3;
    f->call(args, ret);
  }


  template <typename R, typename P0, typename P1, typename P2, typename P3, typename P4>
  R callFunctor(Functor *f, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    args << p1;
    args << p2;
    args << p3;
    args << p4;
    f->call(args, ret);
    R r;
    ret >> r;
    return r;
  }

  template <typename P0, typename P1, typename P2, typename P3, typename P4>
  void callVoidFunctor(Functor *f, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    args << p1;
    args << p2;
    args << p3;
    args << p4;
    f->call(args, ret);
  }


  template <typename R, typename P0, typename P1, typename P2, typename P3, typename P4, typename P5>
  R callFunctor(Functor *f, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    args << p1;
    args << p2;
    args << p3;
    args << p4;
    args << p5;
    f->call(args, ret);
    R r;
    ret >> r;
    return r;
  }

  template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5>
  void callVoidFunctor(Functor *f, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    args << p1;
    args << p2;
    args << p3;
    args << p4;
    args << p5;
    f->call(args, ret);
  }


  template <typename R, typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6>
  R callFunctor(Functor *f, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5, const P6 &p6) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    args << p1;
    args << p2;
    args << p3;
    args << p4;
    args << p5;
    args << p6;
    f->call(args, ret);
    R r;
    ret >> r;
    return r;
  }

  template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6>
  void callVoidFunctor(Functor *f, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5, const P6 &p6) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    args << p1;
    args << p2;
    args << p3;
    args << p4;
    args << p5;
    args << p6;
    f->call(args, ret);
  }


  template <typename R, typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7>
  R callFunctor(Functor *f, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5, const P6 &p6, const P7 &p7) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    args << p1;
    args << p2;
    args << p3;
    args << p4;
    args << p5;
    args << p6;
    args << p7;
    f->call(args, ret);
    R r;
    ret >> r;
    return r;
  }

  template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7>
  void callVoidFunctor(Functor *f, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5, const P6 &p6, const P7 &p7) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    args << p1;
    args << p2;
    args << p3;
    args << p4;
    args << p5;
    args << p6;
    args << p7;
    f->call(args, ret);
  }


  template <typename R, typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8>
  R callFunctor(Functor *f, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5, const P6 &p6, const P7 &p7, const P8 &p8) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    args << p1;
    args << p2;
    args << p3;
    args << p4;
    args << p5;
    args << p6;
    args << p7;
    args << p8;
    f->call(args, ret);
    R r;
    ret >> r;
    return r;
  }

  template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename P6, typename P7, typename P8>
  void callVoidFunctor(Functor *f, const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5, const P6 &p6, const P7 &p7, const P8 &p8) {
    qi::Buffer  argsBuf;
    qi::Buffer  retBuf;
    qi::DataStream args(&argsBuf);
    qi::DataStream ret(&retBuf);

    args << p0;
    args << p1;
    args << p2;
    args << p3;
    args << p4;
    args << p5;
    args << p6;
    args << p7;
    args << p8;
    f->call(args, ret);
  }

}
#endif  // _QIMESSAGING_FUNCTORS_CALLFUNCTOR_HPP_
