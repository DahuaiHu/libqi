#from qibuild_code_generator import *
<%
def generate_argpush_list(count):
    t = "args.push_back(p%(count)d);"
    return generate_list(t, count, sep=" ")
%>
#raw
#pragma once
/*
* $autogen
*
*  Author(s):
*  - Chris Kilner  <ckilner@aldebaran-robotics.com>
*  - Cedric Gestes <gestes@aldebaran-robotics.com>
*
*  Copyright (C) 2010, 2012 Aldebaran Robotics
*/

#ifndef _QI_MESSAGING_OBJECT_HXX_
#define _QI_MESSAGING_OBJECT_HXX_

#include <qimessaging/buffer.hpp>

namespace qi {
#end raw
#for $i in $count

  /// <summary> Calls a method </summary>
  /// <returns> The response </returns>
  template <typename R${generate_typename_list($i, begin=True)}>
  qi::Future<R> Object::call(const std::string& method${generate_param_list($i, begin=True)}) {
    qi::Buffer            breq;
    qi::Buffer            brep;
    qi::FunctorParameters request(&breq);
    qi::FunctorResult     reply(&brep);

    R (*f)(${generate_param_list($i)})  = 0;
    std::string signature(method);
    signature += "::";
    signatureFromObject::value(f, signature);
    #for $j in range($i)
    request.datastream() << p${j};
    #end for
    metaCall(metaObject()._methodsNameToIdx[method], signature, request, reply);

    // Optimise? I think compiler is smart enough to inline the returned object
    R ret;
    reply.datastream() >> ret;
    return ret;
  }
#end for

}
#raw
#endif  // _QI_MESSAGING_OBJECT_HXX_
#end raw
