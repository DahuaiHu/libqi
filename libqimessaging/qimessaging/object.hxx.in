#from qibuild_code_generator import *
<%
def generate_argpush_list(count):
    t = "args.push_back(p%(count)d);"
    return generate_list(t, count, sep=" ")
%>
/*
* $autogen
*
*  Author(s):
*  - Chris Kilner  <ckilner@aldebaran-robotics.com>
*  - Cedric Gestes <gestes@aldebaran-robotics.com>
*
*  Copyright (C) 2010, 2012 Aldebaran Robotics
*/

#raw
#pragma once
#ifndef _QI_MESSAGING_OBJECT_HXX_
#define _QI_MESSAGING_OBJECT_HXX_

#include <qimessaging/buffer.hpp>
#include <qimessaging/functor.hpp>

namespace qi {
#end raw
#for $i in $count

  /// <summary> Calls a method </summary>
  /// <returns> The response </returns>
  template <typename R${generate_typename_list($i, begin=True)}>
  qi::Future<R> Object::call(const std::string& method${generate_param_list($i, begin=True)}) {
    //will be deleted by metaCall
    qi::Future<R>                     future;
    qi::Buffer                        breq;
    qi::ODataStream                   ds(breq);
    qi::FunctorParameters             request(breq);
    qi::FunctorResult                 promise;

    makeFunctorResult<R>(&promise, &future);
    #for $j in range($i)
    ds << p${j};
    #end for
    std::string sigret;
    std::string signature(method);
    signature += "::(";
   #for $j in range($i)
    signatureFromObject::value(p${j}, signature);
   #end for
    signature += ")";
    signatureFromType<R>::value(sigret);
    if (qi::detail::sanityCheckAndReport(ds, promise))
      xMetaCall(sigret, signature, request, promise);
    return future;
  }
#end for

#for $i in $count
#if $i == 0
  inline
#else
  template <${generate_typename_list($i, begin=False)}>
#end if
  void Object::emitEvent(const std::string& eventName${generate_param_list($i, begin=True)}) {
    qi::Buffer                        breq;
    qi::ODataStream                    ds(breq);
    qi::FunctorParameters             request(breq);
    #for $j in range($i)
    ds << p${j};
    #end for
    std::string signature(eventName);
    signature += "::(";
    #for $j in range($i)
    signatureFromObject::value(p${j}, signature);
    #end for
    signature += ")";
    if (ds.status() != qi::ODataStream::Status_Ok)
      qiLogError("object.emit") << "Serialization error: " << (int)ds.status();
    else
      xMetaEmit(signature, request);
  }
#end for
}
#raw
#endif  // _QI_MESSAGING_OBJECT_HXX_
#end raw
