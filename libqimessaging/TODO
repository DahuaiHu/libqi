== QiMessaging ToDo ==

TODO
====

Mandatory:
X2 - ALCommon: threadpool (put each request in it's own thread) (reimplement ALModuleCore::metaCall)
C2 - ALCommon: implement pCall (blocked by future in qi::Object)
X2 - ALCommon: extract http put/get from old ALNetwork, put that in behaviormanager
X2 - cleanup future in RemoteObject without answer (timeout? max count limitation?)
X2 - cleanup Answer in TransportSocket that have not been read (timeout? max count limitation?)
X2 - FunctorReturnFuture: sharedptr, make it work for client and server, use a makeXX factory.
X2 - test gateway, client, server, disconnection
X2 - test 10000 connection/deconnection
X2 - test that we do not loose message
X2 - ALMemory: make subscribe to event work
X1 - object::metacall, remove the prototype without future
C1 - future: asynchronous call for Session (dont fake it)
XX - ALCommon: implement introspection and various alproxy/albroker constructor

from future import:
XX - implement XMPP transport (look at webrtc and libjingle)
XX - object/struct serialization/signature (opaque message)
XX - Unknow signature type.
XX - error handling (be rock solid)
XX - doc (coding style)
XX - doc (qimessaging)
LX - qi::os::getIP, qi::os::getMacAddress, qi::os::getInterfaceName
XX - ServiceDirectory: use good UUID
XX - c/python bindings
CX - qt bindings (server side, complex struct, signal/slot, events)
XX - abstract transport
XX - implement binder transport
XX - private service objects (path)
XX - failover ServiceDirectory
X0 - ALProxies: generate c++ interface from XML (once)
X0 - ALProxies: parse interface and generate XML from that. (use qi/qigen)
X0 - ALProxies: generate proxies from XML (or use the old python-code-generator)
