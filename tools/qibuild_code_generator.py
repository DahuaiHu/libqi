#!/usr/bin/env python
##
## Author(s):
##  - Cedric GESTES <gestes@aldebaran-robotics.com>
##
## Copyright (C) 2010, 2012 Aldebaran Robotics
##

import os
from Cheetah.Template import Template

def generate_list(tpl, count, sep = ", ", begin = False, end = False):
    result = ""
    if begin and count:
        result += sep
    for i in range(count):
        result += tpl % { 'count' : i }
        if i != count - 1 or end:
            result += sep
    return result

def generate_callparam_list(count):
    t = "p%(count)d"
    return generate_list(t, count)

def generate_typename_list(count, begin = False, end = False):
    t = "typename P%(count)d"
    return generate_list(t, count, begin=begin, end=end)

def generate_type_list(count, begin = False, end = False):
    t = "P%(count)d"
    return generate_list(t, count, begin=begin, end=end)

def generate_param_list(count, begin = False, end = False):
    t = "const P%(count)d &p%(count)d"
    return generate_list(t, count, begin=begin, end=end)

def generate_arg_list(count, begin = False, end = False):
    t = "p%(count)d"
    return generate_list(t, count, begin=begin, end=end)

def generate_argpush_list(count):
    t = "args.push_back(p%(count)d);"
    return generate_list(t, count, sep=" ")


def generate_file(src, dst, count):
    code = Template(file = src, searchList = [ { 'count': range(count),
                                                 'autogen' : "AUTOGENERATED CODE, DO NOT EDIT" }])
    with open(dst, "w") as f:
        f.write(str(code))

if __name__ == "__main__":
    #print "cd", os.path.dirname(__file__)
    #os.chdir(os.path.dirname(__file__))
    numArgs = 10 # This results in n-1 arguments
    # generate_file("qimessaging/functors/detail/memberfunctor.hxx.in"    , "qimessaging/functors/detail/memberfunctor.hxx"    , numArgs)
    # generate_file("qimessaging/functors/detail/voidmemberfunctor.hxx.in", "qimessaging/functors/detail/voidmemberfunctor.hxx", numArgs)
    # generate_file("qimessaging/functors/detail/functor.hxx.in"          , "qimessaging/functors/detail/functor.hxx"          , numArgs)
    # generate_file("qimessaging/functors/detail/voidfunctor.hxx.in"      , "qimessaging/functors/detail/voidfunctor.hxx"      , numArgs)
    # generate_file("qimessaging/functors/makefunctor.hpp.in"             , "qimessaging/functors/makefunctor.hpp"             , numArgs)
    # generate_file("qimessaging/functors/callfunctor.hpp.in"             , "qimessaging/functors/callfunctor.hpp"             , numArgs)
    # generate_file("qimessaging/messaging/client.hpp.in"                 , "qimessaging/messaging/client.hpp"                 , numArgs)
    # generate_file("qimessaging/messaging/client.hxx.in"                 , "qimessaging/messaging/client.hxx"                 , numArgs)
    generate_file("qimessaging/object.hxx.in"                 , "qimessaging/object.hxx"                 , numArgs)
