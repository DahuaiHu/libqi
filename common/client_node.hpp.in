#from codegenerator import *
<%
def generate_argpush_list(count):
    t = "args.push_back(p%(count)d);"
    return generate_list(t, count, sep=" ")
%>
#raw
#pragma once
/*
** $autogen
**
** Author(s):
**  - Chris Kilner <ckilner@aldebaran-robotics.com>
**  - Cedric Gestes <gestes@aldebaran-robotics.com>
**
** Copyright (C) 2010 Aldebaran Robotics
*/
#ifndef COMMON_CLIENT_NODE_HPP_
#define COMMON_CLIENT_NODE_HPP_

#include <string>
#include <alcommon-ng/messaging/call_definition.hpp>
#include <alcommon-ng/messaging/result_definition.hpp>
#include <alcommon-ng/functor/functionsignature.hpp>
#include <boost/shared_ptr.hpp>

namespace AL {
  namespace Common {

    // forward declared implementation
    class ClientNodeImp;

    class ClientNode {
    public:
      ClientNode();

      ClientNode(const std::string& clientName,
        const std::string& masterAddress);

      virtual ~ClientNode();
#end raw
#for $i in $count

      #if $i != 0
      template <${generate_typename_list($i)}>
      #end if
      void callVoid(const std::string methodName${generate_param_list($i, begin=True)}) {
          AL::Messaging::ResultDefinition result;
          void (*f)(${generate_param_list($i)})  = 0;
          std::string hash = makeSignature(methodName, f);
          xCall(AL::Messaging::CallDefinition(hash${generate_arg_list($i, begin=True)}), result);
      }

      template <typename R${generate_typename_list($i, begin=True)}>
      R call(const std::string methodName${generate_param_list($i, begin=True)}) {
        AL::Messaging::ResultDefinition result;
        void (*f)(${generate_param_list($i)})  = 0;
        std::string hash = makeSignature(methodName, f);
        xCall(AL::Messaging::CallDefinition(hash${generate_arg_list($i, begin=True)}), result);
        return result.value().as<R>();
      }
#end for

    private:
      void xCall(const AL::Messaging::CallDefinition& callDef, AL::Messaging::ResultDefinition &result);
      //TODO optimise : autoptr is faster
      boost::shared_ptr<ClientNodeImp> fImp;
    };
  }
}
#raw
#endif  // COMMON_CLIENT_NODE_HPP_
#end raw
