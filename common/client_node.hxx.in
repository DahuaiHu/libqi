#from codegenerator import *
<%
def generate_argpush_list(count):
    t = "args.push_back(p%(count)d);"
    return generate_list(t, count, sep=" ")
%>
#raw
#pragma once
/*
** $autogen
**
** Author(s):
**  - Chris Kilner <ckilner@aldebaran-robotics.com>
**  - Cedric Gestes <gestes@aldebaran-robotics.com>
**
** Copyright (C) 2010 Aldebaran Robotics
*/
#ifndef COMMON_CLIENT_NODE_HXX_
#define COMMON_CLIENT_NODE_HXX_

namespace AL {
  namespace Common {
#end raw
#for $i in $count

    #if $i != 0
    template <${generate_typename_list($i)}>
    void ClientNode::callVoid(const std::string& methodName${generate_param_list($i, begin=True)}) {
        AL::Messaging::ResultDefinition result;
        void (*f)(${generate_param_list($i)})  = 0;
        std::string hash = makeSignature(methodName, f);
        xCall(AL::Messaging::CallDefinition(hash${generate_arg_list($i, begin=True)}), result);
    }
    #end if

    template <typename RETURN_TYPE${generate_typename_list($i, begin=True)}>
    RETURN_TYPE ClientNode::call(const std::string& methodName${generate_param_list($i, begin=True)}) {
      AL::Messaging::ResultDefinition result;
      RETURN_TYPE (*f)(${generate_param_list($i)})  = 0;
      std::string hash = makeSignature(methodName, f);
      xCall(AL::Messaging::CallDefinition(hash${generate_arg_list($i, begin=True)}), result);
      return result.value().as<RETURN_TYPE>();
    }
#end for
  }
}
#raw
#endif  // COMMON_CLIENT_NODE_HXX_
#end raw
