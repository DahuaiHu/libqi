==== IPPC ====
The current only supported transport is shm.

== How to Implement a server ==
Create a class that derivate from ServerCommandDelegate, create a Server and set the delegate to your class.
Each time new call are made "ResultDefinition ippcCallback(CallDefinition)" will be called, depending on the calldefinition
return the right ResultDefinition. Return ALPtr<ResultDefinition>() is like returning void.

== How to use a client ==
Create a client, call "ResultDefinition send(CallDefinition)" and you are done.

== Public Classes ==

CallDefinition          : class that represent a function call (including args), serializable
ResultDefinition        : class that represent a return type (including the return value), also represent exception, serializable
ServerCommandDelegate   : the delegate a client should implement to handle call the server receive

== Private Classes ==
ServerBase              : the base class a server should implement
ClientBase              : the base class a client should implement
ServerResponseDelegate  : the delegate the server should implement to send response (used by connection handlers)
ShmConnection           : a shm connection

== Note ==
transport/shm/client/Connection.hpp is an implementation detail. It should not be used outside the librarie.



== Change ==
Class:
ippc::CallbackCommand => ippc::ServerCommandDelegate
ippc::Connection => ippc::Client


Function:
ippc::ServerCommandDelegate::ippcCallback now return the response:
  the prototype change:
    -> void ippcCallback(const ippc::CallDefinition &def)
    => AL::ALPtr<ippc::ResultDefinition> ippcCallback(const ippc::CallDefinition &def)
  you shoud not try to send the response back to the server, just return it, and the server will do that
  automatically.

ippc::Server::setCallback => ippc::Server::setCommandDelegate
