// -*- mode:c++; -*-

/** \class qi::Application qi/application.hpp
 * \brief Class handling startup and teardown of an application.
 *
 * The qi::Application class is designed to ease
 * startup and teardown of an executable.
 *
 * All executables using qi classes should create an instance of qi::Application
 * on the stack of the main() function.
 *
 * \ingroup qi::Application
 */

/**
 * \fn qi::Application::Application(int argc, char** argv)
 * \brief Application constructor. Must be the first thing called by main().
 * \ingroup qi::Application
 */

/**
 * \fn bool qi::Application::initialized()
 * \brief Return whether the Application instance was created.
 * \ingroup qi::Application
 */

/**
 * \fn int qi::Application::argc()
 * \brief Get argc.
 * \ingroup qi::Application
 * \return argc if Application was initialized, -1 otherwise.
 */

 /**
 * \fn const char** qi::Application::argv()
 * \brief Get argv
 * \ingroup qi::Application
 * \return argv if Application was initialized, 0 otherwise.
 */

 /**
 * \fn const std::vector<std::string>& qi::Application::arguments()
 * \brief Get arguments as a vector<string>
 * \ingroup qi::Application
 */

 /**
 * \fn void qi::Application::setArguments(const std::vector<std::string>&)
 * \brief Set arguments as a vector<string>
 * \ingroup qi::Application
 */

 /**
 * \fn void qi::Application::setArguments(int argc, char** argv)
 * \brief Set arguments as argc, argv
 * \ingroup qi::Application
 */

 /**
 * \fn const char *qi::Application::program()
 * \brief Return the current program.
 * \ingroup qi::Application
 * Computed using specific OS API:
 *
 * - Apple  : _NSGetExecutablePath
 * - Linux  : reading "/proc/self/exe"
 * - Windows: GetModuleFileName
 *
 * If the former API fail it will try to guess the value from argv[0].
 * For this method to work qi::init(argc, argv) should have been called in main().
 *  \return full path to the current running program
 */

 /**
 * \fn bool qi::Application::run()
 * \brief Waits until one of those conditions becomes true:
 *    - stop() is called.
 *    - TERM or QUIT signal is received.
 *    - the Application instance is destroyed, which means main() is exiting.
 *
 * Run can be called by multiple threads simultaneously.
 * \ingroup qi::Application
 */

 /**
 * \fn bool qi::Application::atEnter(boost::function<void()> func)
 * \brief Register a function to be executed at Application creation.
 * \ingroup qi::Application
 */

 /**
 * \fn bool qi::Application::atExit(boost::function<void()> func)
 * \brief Register a function to be executed when stop() is called.
 * \ingroup qi::Application
 */

 /**
 * \fn bool qi::Application::atExit(boost::function<void()> func)
 * \brief Register a function to be executed at Application destruction.
 * \ingroup qi::Application
 */

 /**
 * \fn bool qi::Application::atSignal(boost::function<void(int)> handler, int signal)
 * \brief Register a function to be executed when a signal occurrs.
 *
 * The handler is executed in a thread, not from within the signal handler,
 * so there is no restriction on what can be done by your handler function,
 * except that it should return reasonably quickly.
 * \ingroup qi::Application
 */

 /**
 * \fn void* qi::Application::loadModule(const std::string& name, int flags=0)
 * \brief Load a module into the current process.
 * \param name The module path and name. If no extension is used, the
 *        correct extension for a library on the current platform is used.
 * \param flags Extra flags to pass to the dlopen function.
 * \return A handle, to be used by qi::os::dlsym() or unloadModule().
 *
 * The module can execute code when loaded by using QI_AT_ENTER().
 * \ingroup qi::Application
 */

 /**
  * \def QI_AT_ENTER(func)
  * \brief calls qi::Application::atEnter(func) at static initialization time.
  * \ingroup qi::Application
  */

   /**
  * \def QI_AT_EXIT(func)
  * \brief calls qi::Application::atExit(func) at static initialization time.
  * \ingroup qi::Application
  */

  /**
  * \def QI_COMMAND_LINE_OPTIONS(opts)
  * \brief Register command line options using boost::program_options
  * \ingroup qi::Application
  * Use the () operator as described in boost::program_options
  * documentation.
  */
