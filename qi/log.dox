// -*- mode:c++; -*-

/**
 * \namespace qi::log
 * \brief Log functions with different levels of verbosity.
 *
 * Each log has a category defined by the call to QI_LOG_CATEGORY()
 * found in scope. So you must call QI_LOG_CATEGORY at least once, for
 * instance at the beginning of your source file or function.
 *
 *
 * Logging is performed by invoking the QiLog* macro families, one
 * per severity level: QiLogError, QiLogWarning, QiLogInfo, QiLogVerbose,
 * and QiLogDebug.
 * Those macros accept either a format syntax inside them,
 * or a stream syntax outside.
 *
 * \verbatim
 *
 * .. code-block:: cpp
 *
 * {
 *   qiLogCategory(my.category);
 *   qiLogInfoF("1 + 1 is %s", 1+1);
 *   qiLogInfo() << "1 + 1 is " << 1+1;
 * }
 *
 * \endverbatim
 *
 *
 * Listeners for all log messages can be added with addLogHandler().
 *
 * Logs can be filtered per-listener per-category with setCategory()
 * Globbing is supported each time a category name must be specified:
 *
 * \verbatim
 *   setCategory("internal.*", silent);
 *
 * One can also set a filtering rule in QI_LOG_FILTERS environment variable.
 * syntax is colon-separated list of rules of the form (+|-)CAT or CAT=level.
 * For example, -internal.*:file=verbose
 *
 * \endverbatim
 *
 */

/**
 * \def qiLogDebug
 * \brief Log in debug mode. This level is not shown by default.
 *
 * \verbatim
 * Log in debug mode. Not compiled on release. Use as follow:
 *
 * .. code-block:: cpp
 *
 *     qiLogDebug("foo.bar", "my foo is %d bar", 42);
 *     // or
 *     qiLogDebug("foo.bar") << "my foo is " << 42 << "bar";
 *
 * If you don't want to see any log, use silent log level.
 * \endverbatim
 */

/**
 * \def qiLogVerbose
 * \brief Log in verbose mode. This level is not shown by default.
 */

/**
 * \def qiLogInfo
 * \brief Log in info mode.
 */

/**
 * \def qiLogWarning
 * \brief Log in warning mode.
 */

/**
 * \def qiLogError
 * \brief Log in error mode.
 */

/**
 * \def qiLogFatal
 * \brief Log in fatal mode.
 */


/**
 * \enum qi::LogLevel
 * \brief Log level verbosity.
 */

/**
 * \var qi::LogLevel_Silent
 * \brief silent log level
 *
 * \var qi::LogLevel_Fatal
 * \brief fatal log level
 *
 * \var qi::LogLevel_Error
 * \brief error log level
 *
 * \var qi::LogLevel_Warning
 * \brief warning log level
 *
 * \var qi::LogLevel_Info
 * \brief info log level
 *
 * \var qi::LogLevel_Verbose
 * \brief verbose log level
 *
 * \var qi::LogLevel_Debug
 * \brief debug log level
 */

/**
 * \typedef qi::log::logFuncHandler
 * \brief Boost delegate to log function (verbosity lv, date of log,
 *        category, message, file, function, line).
 */

/**
 * \fn qi::log::init(qi::LogLevel, int, bool)
 * \brief init the logging system (could be avoided)
 * \param verb Log verbosity
 * \param ctx Display Context
 * \param synchronous Synchronous log?
 */

/**
 * \fn qi::log::destroy()
 * \brief Stop and flush the logging system.
 *
 * \verbatim
 * Should be called in the main of program using atexit. For example:
 *
 * .. code-block:: cpp
 *
 *     atexit(qi::log::destroy)
 *
 * This is useful only for asynchronous log.
 * \endverbatim
 */

/**
 * \fn qi::log::log(const qi::LogLevel, const char*, const char*, const char*, const char*, const int)
 * \brief Log function. You should call qiLog* macros instead.
 *
 * \param verb The verbosity of the message.
 * \param category Log category (for filtering in the future).
 * \param msg Log message.
 * \param file Filename from which this function was called (ex: __FILE__).
 * \param fct Function name from which this function was called (ex: __FUNCTION__).
 * \param line Line from which this function was called (ex: __LINE__).
 */

/**
 * \fn qi::log::logLevelToString(const qi::LogLevel)
 * \brief Convert log verbosity to a readable string.
 * \param verb Verbosity value.
 * \return Returns a string matching the log level verbosity.
 */


/**
 * \fn qi::log::stringToLogLevel(const char*)
 * \brief Convert string to log verbosity.
 * \param verb debug, verbose, info, warning, error, fatal, silent
 * \return Log level verbosity
 */


/**
 * \fn qi::log::setVerbosity(qi::LogLevel, SubscriberId);
 * \brief Set log verbosity.
 * \param lv Default verbosity level shown in the logs.
 *
 * \note the level set by this function is a default value, overriden by
 * all setCategory() calls.
 *
 * If you don't want any log use silent mode.
 */

/**
 * \fn qi::log::verbosity()
 * \brief Get log verbosity.
 * \return Maximal verbosity displayed.
 */


/**
 * \fn qi::log::setContext(qi::LogContext);
 * \brief Set log context verbosity.
 *
 * Display log context (line, function, file).
 *
 * \param ctx Value to set context.
 *
 * \verbatim
 * Context values possible:
 *
 * - 0: none
 * - 1: categories
 * - 2: date
 * - 3: file+line
 * - 4: date+categories
 * - 5: date+line+file
 * - 6: categories+line+file
 * - 7: all (date+categories+line+file+function)
 * \endverbatim
 */

/**
 * \fn qi::log::context()
 * \brief Get log context.
 * \return Returns the level of context verbosity.
 */

/**
 * \fn qi::log::setSynchronousLog(bool);
 * \brief Enables or disables synchronous logs.
 * \param sync Value to set or unset synchronous.
 */

/**
 * \fn qi::log::addLogHandler(const std::string&, qi::log::logFuncHandler);
 * \brief Add a log handler.
 * \param name Name of the handler, useful to remove handler (prefer lowercase).
 * \param fct Boost delegate to log handler function.
 */

/**
 * \fn qi::log::removeLogHandler(const std::string&)
 * \brief Remove a log handler.
 * \param name Name of the handler.
 */

/**
 * \fn qi::log::flush()
 * \brief Flush asynchronous logs.
 */

/**
 * \class qi::log::LogStream
 * \includename{qi/log.hpp}
 * \brief Each log macro creates a LogStream object.
 */

/**
 * \fn qi::log::LogStream::~LogStream
 * \brief LogStream destructor.
 */

/**
 * \fn qi::log::LogStream::LogStream(const LogLevel, const char*, const char*, const int, const char*)
 * \brief LogStream. Will log at object destruction.
 * \param level The verbosity of the message.
 * \param category Log category (for filtering in the future).
 * \param file Filename from which this function was called (ex: __FILE__).
 * \param function Function name from which this function was called (ex: __FUNCTION__).
 * \param line Line from which this function was called (ex: __LINE__).
 */

/**
 * \fn qi::log::LogStream::LogStream(const LogLevel, const char *, const char *, const int, const char *, const char *, ...)
 * \brief LogStream. Will log at object destruction.
 * \param level The verbosity of the message.
 * \param category Log category (for filtering in the future).
 * \param fmt Log message as a format string.
 * \param file Filename from which this function was called (ex: __FILE__).
 * \param function Function name from which this function was called (ex: __FUNCTION__).
 * \param line Line from which this function was called (ex: __LINE__).
 */

/**
 * \fn qi::log::LogStream::LogStream(const LogStream &)
 * \brief LogStream Copy Constructor.
 * \param rhs LogStream.
 */

/**
 * \fn qi::log::LogStream &qi::log::LogStream::operator=(const LogStream &)
 * \brief LogStream assignment operator.
 * \param rhs LogStream.
 */

/**
 * \fn qi::log::LogStream& qi::log::LogStream::self()
 * \brief Necessary to work with an anonymous objects.
 */

/**
 * \typedef logFuncHandler
 * \brief A function handler for logs.
 */
