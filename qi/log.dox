// -*- mode:c++; -*-

/**
 * \namespace qi::log
 * \brief Log functions
 * \ingroup qilog
 */

/**
 * \def qiLogDebug
 * \ingroup qilog
 *  Log in debug mode. Not compile on release.
 * use as follow:
 * \code
 * qiLogDebug("foo.bar", "my foo is %d bar", 42);
 * or
 * qiLogDebug("foo.bar") << "my foo is " << 42 << "bar";
 * \endcode
 */

/**
 * \def qiLogVerbose
 * \ingroup qilog
 *  Log in verbose mode. This mode isn't show by default but always compile.
 */

/**
 * \def qiLogInfo
 * \ingroup qilog
 *  Log in info mode.
 */

/**
 * \def qiLogWarning
 * \ingroup qilog
 *  Log in warning mode.
 */

/**
 * \def qiLogError
 * \ingroup qilog
 *  Log in error mode.
 */

/**
 * \def qiLogFatal
 * \ingroup qilog
 *  Log in fatal mode.
 */




/**
 * \enum qi::log::LogLevel
 * \ingroup qilog
 * \brief Log level verbosity.
 */

/**
 * \var qi::log::silent
 * \brief silent log level
 * \var qi::log::LogLevel::fatal
 * \brief fatal log level
 * \var qi::log::error
 * \brief error log level
 * \var qi::log::warning
 * \brief warning log level
 * \var qi::log::info
 * \brief info log level
 * \var qi::log::verbose
 * \brief verbose log level
 * \var qi::log::debug
 * \brief debug log level
 */

/**
 * \typedef qi::log::logFuncHandler
 * \ingroup qilog
 * \brief Boost delegate to log function (verbosity lv, date of log,
 *        category, message, file, function, line).
 *        e.g.
 */

/**
 * \fn void qi::log::init(qi::log::LogLevel, int, bool)
 * \brief init the logging system (could be avoided)
 * \ingroup qilog
 * \param verb Log verbosity
 * \param ctx Display Context
 * \param synchronous Synchronous log?
 */

/**
 * \fn void qi::log::destroy()
 * \brief stop and flush the logging system
 * \ingroup qilog
 * should be called in the main of program using atexit.
 * for example: atexit(qi::log::destroy)
 * This is useful only for asynchronous log.
 */

/**
 * \fn void qi::log::log(const qi::log::LogLevel, const char *, const char *, const char *, const char *, const int);
 * \brief Log function
 * \ingroup qilog
 *
 * You should call qiLog* macro.
 *
 * \param verb { debug = 6, verbose = 5, info = 4, warning = 3, error = 2, fatal = 1, silent = 0 }
 * \param category Log category.
 * \param msg Log message.
 * \param file __FILE__
 * \param fct __FUNCTION__
 * \param line __LINE__
 */


/**
 * \fn const char* qi::log::logLevelToString(const qi::log::LogLevel);
 * \brief Convert log verbosity to char*
 * \ingroup qilog
 * \param verb { debug = 6, verbose=5, info = 4, warning = 3, error = 2, fatal = 1, silent = 0 }
 *
 * \return one of [SILENT], [FATAL], [ERROR],
 *         [WARN ], [INFO ], [VERB ],
 *         [DEBUG]
 */


/**
 * \fn const qi::log::LogLevel qi::log::stringToLogLevel(const char* verb);
 * \brief Convert string to log verbosity
 * \ingroup qilog
 * \param verb debug, verbose, info,
 *             warning, error, fatal,
 *             silent
 *
 * \return Log level verbosity
 */


/**
 * \fn void qi::log::setVerbosity(const qi::log::LogLevel);
 * \brief Set log verbosity.
 * \ingroup qilog
 *
 * If you don't want any log use silent mode.
 *
 * \param lv maximal verbosity shown
 */

/**
 * \fn qi::log::LogLevel qi::log::verbosity();
 * \brief Get log verbosity.
 * \ingroup qilog
 * \return Maximal verbosity display.
 */


/**
 * \fn void qi::log::setContext(int ctx);
 * \brief Set log context.
 * \ingroup qilog
 *
 * Display log context (line, function, file).
 *
 * \param ctx Value to set context.
 *  - 0: none
 *  - 1: categories
 *  - 2: date
 *  - 3: file+line
 *  - 4: date+categories
 *  - 5: date+line+file
 *  - 6: categories+line+file
 *  - 7: all (date+categories+line+file+function)
 */

/**
 * \fn int qi::log::context();
 * \brief Get log context.
 * \ingroup qilog
 * \return true if active, false otherwise.
 */


/**
 * \fn void qi::log::setSynchronousLog(bool sync);
 * \brief Set synchronous logs.
 * \ingroup qilog
 *
 * \param sync Value to set context.
 */

/**
 * \fn void qi::log::addLogHandler(const std::string&, qi::log::logFuncHandler);
 * \brief Add log handler.
 * \ingroup qilog
 *
 * \param fct Boost delegate to log handler function.
 * \param name name of the handler, this is the one used to remove handler (prefer lowcase).
 */

/**
 * \fn void qi::log::removeLogHandler(const std::string& name);
 * \brief remove log handler.
 * \ingroup qilog
 *
 * \param name name of the handler.
 */

/**
 * \fn void qi::log::flush();
 * \brief flush asynchronous log.
 * \ingroup qilog
 */

/**
 * \class qi::log::LogStream qi/log.hpp
 * \ingroup qilog
 * \brief Each log macro create a LogStream object.
 */

/**
 * \fn qi::log::LogStream::~LogStream
 * \brief Destructor
 */

/**
 * \fn qi::log::LogStream::LogStream(const LogLevel, const char *, const char *, const int, const char *)
 * \brief LogStream. Will log at object destruction
 * \param level { debug = 6, verbose=5, info = 4, warning = 3, error = 2, fatal = 1, silent = 0 }
 * \param file __FILE__
 * \param function __FUNCTION__
 * \param line __LINE__
 * \param category log category
 */

/**
 * \fn qi::log::LogStream::LogStream(const LogLevel, const char *, const char *, const int, const char *, const char *, ...)
 * \brief LogStream. Will log at object destruction
 * \param level { debug = 6, verbose=5, info = 4, warning = 3, error = 2, fatal = 1, silent = 0 }
 * \param file __FILE__
 * \param function __FUNCTION__
 * \param line __LINE__
 * \param category log category
 * \param fmt printf like format string
 */

/**
 * \fn qi::log::LogStream::LogStream(const LogStream &)
 * \brief LogStream. Copy Ctor.
 * \param rhs LogStream.
 */

/**
 * \fn qi::log::LogStream &qi::log::LogStream::operator=(const LogStream &)
 * \brief LogStream assignment operator.
 * \param rhs LogStream.
 */

/**
 * \fn qi::log::LogStream &qi::log::LogStream::self()
 * \brief Necessary to work with an anonymous object
 */
