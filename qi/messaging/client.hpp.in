#from codegenerator import *
<%
def generate_argpush_list(count):
    t = "args.push_back(p%(count)d);"
    return generate_list(t, count, sep=" ")
%>
#raw
#pragma once
/*
** $autogen
**
** Author(s):
**  - Chris Kilner  <ckilner@aldebaran-robotics.com>
**  - Cedric Gestes <gestes@aldebaran-robotics.com>
**
** Copyright (C) 2010 Aldebaran Robotics
*/
#ifndef _QI_MESSAGING_CLIENT_HPP_IN_
#define _QI_MESSAGING_CLIENT_HPP_IN_

#include <string>
#include <memory>
#include <qi/signature.hpp>
#include <qi/serialization/serializer.hpp>

namespace qi {
  namespace detail {
    class ClientImpl;
  }

  /// <summary>
  /// Used to call services that have been added to a server.
  /// If the service is unknown, the master is interogated
  /// to find the appropriate server.
  /// </summary>
  class Client {
  public:
    /// <summary>
    /// DefaultConstructor
    /// Used to call services that have been added to a server.
    /// If the service is unknown, the master is interogated
    /// to find the appropriate server.
    /// </summary>
    Client();

    /// <summary>
    /// Used to call services that have been added to a server.
    /// If the service is unknown, the master is interogated
    /// to find the appropriate server
    /// </summary>
    /// <param name="clientName">
    /// The name you want to give to this client
    /// e.g. "client"
    /// </param>
    /// <param name="masterAddress">
    /// The address of the master that is used to find services
    /// e.g. "127.0.0.1:5555"
    /// </param>
    Client(const std::string& clientName, const std::string& masterAddress = "127.0.0.1:5555");

    virtual ~Client();
    
    bool isInitialized() const;

#end raw

#for $i in $count
    #if $i != 0
    template <${generate_typename_list($i)}>
    #end if
    void callVoid(const std::string& methodName${generate_param_list($i, begin=True)});

    template <typename RETURN_TYPE${generate_typename_list($i, begin=True)}>
    RETURN_TYPE call(const std::string& methodName${generate_param_list($i, begin=True)});

#end for
  private:
    void xCall(const std::string& signature,
      const qi::serialization::Message& request,
            qi::serialization::Message& result);
    std::auto_ptr<qi::detail::ClientImpl> _impl;
  };
}

#raw
#include <qi/messaging/client.hxx>
#endif  // _QI_MESSAGING_CLIENT_HPP_IN_
#end raw
