#from codegenerator import *
<%
def generate_argpush_list(count):
    t = "args.push_back(p%(count)d);"
    return generate_list(t, count, sep=" ")
%>
#raw
#pragma once
/*
** $autogen
**
** Author(s):
**  - Chris Kilner  <ckilner@aldebaran-robotics.com>
**  - Cedric Gestes <gestes@aldebaran-robotics.com>
**
** Copyright (C) 2010 Aldebaran Robotics
*/
#ifndef _QI_MESSAGING_CLIENT_HXX_IN_
#define _QI_MESSAGING_CLIENT_HXX_IN_

#include <qi/serialization.hpp>

namespace qi {
#end raw
#for $i in $count

#if $i != 0
  template <${generate_typename_list($i)}>
  void Client::callVoid(const std::string& methodName${generate_param_list($i, begin=True)}) {
    qi::serialization::Message calldef;
    qi::serialization::Message resultdef;

    void (*f)(${generate_param_list($i)})  = 0;
    calldef.writeString(makeFunctionSignature(methodName, f));
    #for $j in range($i)
    qi::serialization::serialize<P${j}>::write(calldef, p${j});
    #end for
    xCall(hash, calldef, resultdef);
  }
#end if

  template <typename R${generate_typename_list($i, begin=True)}>
  R Client::call(const std::string& methodName${generate_param_list($i, begin=True)}) {
    qi::serialization::Message calldef;
    qi::serialization::Message resultdef;

    R (*f)(${generate_param_list($i)})  = 0;
    calldef.writeString(makeFunctionSignature(methodName, f));
    #for $j in range($i)
    qi::serialization::serialize<P${j}>::write(calldef, p${j});
    #end for
    xCall(hash, calldef, resultdef);

    //Optimise? I think compiler is smart enought to inline the returned object
    R ret;
    qi::serialization::serialize<R>::read(resultdef, ret);
    return ret;
  }
#end for

}
#raw
#endif  // _QI_MESSAGING_CLIENT_HXX_IN_
#end raw
