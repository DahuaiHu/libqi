#from codegenerator import *
<%
def generate_argpush_list(count):
    t = "args.push_back(p%(count)d);"
    return generate_list(t, count, sep=" ")
%>
#raw
#pragma once
/*
** $autogen
**
** Author(s):
**  - Chris Kilner  <ckilner@aldebaran-robotics.com>
**  - Cedric Gestes <gestes@aldebaran-robotics.com>
**
** Copyright (C) 2010 Aldebaran Robotics
*/
#ifndef QI_NODES_CLIENT_NODE_HXX_
#define QI_NODES_CLIENT_NODE_HXX_

namespace qi {
#end raw
#for $i in $count

  #if $i != 0
  template <${generate_typename_list($i)}>
  void ClientNode::callVoid(const std::string& methodName${generate_param_list($i, begin=True)}) {
    qi::serialization::SerializedData calldef;
    qi::serialization::SerializedData resultdef;

    void (*f)(${generate_param_list($i)})  = 0;
    std::string hash = makeSignature(methodName, f);

    R (*f)(${generate_param_list($i)})  = 0;
    std::string hash = makeSignature(methodName, f);
    calldef->write<std::string>(hash);
    #for $j in range($i)
    calldef->write<P${j}>(p${j})
    #end for
    xCall(calldef, resultdef);
  }
  #end if

  template <typename R${generate_typename_list($i, begin=True)}>
  R ClientNode::call(const std::string& methodName${generate_param_list($i, begin=True)}) {
    qi::serialization::SerializedData calldef;
    qi::serialization::SerializedData resultdef;

    R (*f)(${generate_param_list($i)})  = 0;
    std::string hash = makeSignature(methodName, f);
    calldef->write<std::string>(hash);
    #for $j in range($i)
    calldef->write<P${j}>(p${j})
    #end for
    xCall(calldef, resultdef);

    //TODO: optimise
    R ret;
    resultdef->read<R>(ret);
    return ret;
  }
#end for

}
#raw
#endif  // QI_NODES_CLIENT_NODE_HXX_
#end raw
