// -*- mode:c++; -*-

/**
 * \namespace qi::os
 * \brief OS abstraction layer.
 * \ingroup qios
 */

/**
 * \fn int qi::os::fopen(const char *, const char *)
 * \brief Open a file.
 *
 * Nothing special under posix systems, it's only useful for Windows,
 * where files should be open using a widestring.
 * Refer to 'man 3 fopen' for more informations, and to the documentation of
 * _wfopen on MSDN to understand the Windows behaviors.
 *
 * \param filename Path to the file (in UTF-8).
 * \param mode The mode.
 * \return A FILE* handle, 0 on error.
 * \ingroup qios
 * \since 1.12
 */

/**
\fn int qi::os::stat(const char *, struct stat *)
  \brief Get file status.

  Stats the file pointed to by filename and fills in pstat.
  You need to include <sys/stat.h> to get access to struct.
  \todo explain how to use stat on windows !

  \param filename Path to the file (in UTF-8).
  \param pstat A pointer to a struct stat that will be filled by the function.
  \return 0 on success, -1 on error
  \ingroup qios
  \since 1.12


\fn qi::os::checkdbg
  \brief Check if the current program is running under a debugger.

  \warning Not implement for windows.

  \return -1 on error, 1 if the program is currently being debugged, 0 otherwize.
  \ingroup qios
  \since 1.12
  \file qi/os.hpp

\fn std::string qi::os::home();
  \brief Return path to the current user's HOME.
  \ingroup qios

\fn std::string qi::os::mktmpdir(const char *prefix = "");
  \brief Return a writable temporary directory.
  \ingroup qios
         The caller is responsible of destroying the returned directory.
         This will create a unique directory in the temporary directory returned by qi::os::tmp().
         The specified prefix will be prefixed to a generated unique name.
  \param prefix Prefix of the tmp file (in UTF-8).
  \since 1.12.1
  \return The path to the temporary directory.

\fn std::string qi::os::tmpdir(const char *prefix = "");
  \brief Return a temporary directory.
  \ingroup qios
         look at qi::os::mktmpdir
  \param prefix Prefix of the tmp file (in UTF-8).
  \deprecated 1.12.1
  \return The path to the temporary directory.

\fn std::string qi::os::tmp();
  \brief Return the system's temporary directory.
  \ingroup qios
         The directory is writeable and exits.
         The caller is responsible of destroying the temporary
         file create.
  \return The path to the system's temporary directory.


\fn std::string qi::os::gethostname();
  \brief Get the system's hostname.
  \ingroup qios
        An empty string is returned on failure.
  \return The system's hostname
*/




///\name Environment Functions
/**@{


  \fn std::string qi::os::getenv(const char *)
    \brief Get an environment variable.

    Searches  the  environment
    list to find the environment variable var,
    and returns a pointer to the corresponding value string.

    \param var The environment variable to search for.
    \return A pointer to the value in the environment,
            or an empty string if there is no match.
    \ingroup qios
    \since 1.12
    \see qi::os::setenv

  \fn int qi::os::setenv(const char *, const char *)
    \brief Change or add an environment variable.

    Adds the variable name to the environment with the value
    var, if name does not already exist. If var does exist
    in the environment, then its value is changed to value

    \param var The variable name.
    \param value The value of the variable.
    \return 0 on success, or -1 on error.
    \ingroup qios
    \since 1.12
    \see qi::os::getenv

*/
///@}





///\name Time Functions
/**@{

  \fn void qi::os::sleep(unsigned int seconds);
    \brief Sleep for the specified number of seconds.

    Under Linux/OSX it will not be disturbed by eventual signals.
    Makes the calling thread sleep until seconds have elapsed
    or a signal arrives which is not ignored.

    \param seconds Number of second to sleep for
    \ingroup qios
    \since 1.12
    \see qi::os::msleep


  \fn void qi::os::msleep(unsigned int milliseconds);
    \brief Sleep for the specified number of milliseconds.

    Under Linux/OSX it will not be disturbed by eventual signals.
    Makes the calling thread sleep until millliseconds have elapsed
    or a signal arrives which is not ignored.

    \param milliseconds Number of milliseconds to sleep for
    \ingroup qios
    \since 1.12
    \see qi::os::sleep
    \file qi/os.hpp


  \struct qi::os::timeval
    \brief qi::os::timeval struct similar to POSIX timeval
    \ingroup qios
    \var qi::os::timeval::tv_usec
      \brief microseconds
    \var qi::os::timeval::tv_sec
      \brief seconds

  \fn int qi::os::gettimeofday(qi::os::timeval *tp);
    \brief The gettimeofday() function shall obtain the current time, expressed as seconds and microseconds
           since the Epoch, and store it in the timeval structure pointed to by tp. The resolution of the
           system clock is unspecified. This clock is subject to NTP adjustments.
    \ingroup qios

    \param tp the timeval structure used to return the current time
    \return should return 0 on success

    \fn int64_t ustime();
      \brief Return elapsed time since program start in microseconds
*/
///@}





///\name Shared Library Functions
/**@{

\fn void *qi::os::dlopen(const char *filename, int flag = -1);
  \brief Loads dynamic library.

  Loads the dynamic library file named by the null-terminated
  string filename and returns an opaque "handle" for
  the dynamic library. If filename is NULL, then the returned
  handle is for the main program.

  \param filename Name of the dynamic library.
  \param flag Flags to load the dynamic library.
  \ingroup qios
  \since 1.12
  \see qi::os::dlsym qi::os::dlerror qi::os::dlclose


\fn int qi::os::dlclose(void *handle);
  \brief Decrements the reference count on the dynamic library.

  Decrements the reference count on the dynamic library handle.
  If the reference count drops to zero and no other loaded libraries
  use symbols in it, then the dynamic library is unloaded.

  \param handle The dynamic library handle.
  \return 0 on success, and nonzero on error.
  \ingroup qios
  \since 1.12
  \see qi::os::dlopen qi::os::dlsym qi::os::dlerror


\fn void *qi::os::dlsym(void *handle, const char *symbol);
  \brief Get the address where the symbol is loaded into memory.

  If the symbol is not found, in the specified library or any
  of the libraries that were automatically loaded by dlopen()
  when that library was loaded, dlsym() returns NULL.

  \param handle Handle of a dynamic library returned by dlopen().
  \param symbol The null-terminated symbol name.
  \ingroup qios
  \since 1.12
  \see qi::os::dlopen qi::os::dlerror qi::os::dlclose


\fn const char *qi::os::dlerror(void);
  \brief Returns a human readable string.

  Returns a human readable string describing the most recent error
  that occurred from dlopen(), dlsym() or dlclose() since the last
  call to dlerror().

  \return It returns NULL if no errors have occurred since
  initialization or since it was last called or the human
  readable string.
  \ingroup qios
  \since 1.12
  \see qi::os::dlopen qi::os::dlsym qi::os::dlclose

*/
///@}





///\name Process Functions
/**@{

  \fn int qi::os::spawnvp(char *const argv[]);
    \brief Create and execute a new process.

    Creates and executes a new process.

    \param argv The command line arguments of the new process
                as an array (NULL terminated).
    \return -1 on error, child pid otherwise.
    \ingroup qios
    \since 1.12
    \see qi::os::waitpid qi::os::spawnlp qi::os::system


  \fn int qi::os::spawnlp(const char* argv, ...);
    \brief Create and execute a new process.

    Creates and executes a new process

    \param argv Path of file to be executed.
    \param ... The command line arguments of the new process
               as var args.
    \return -1 on error, child pid otherwise.
    \ingroup qios
    \since 1.12
    \see qi::os::waitpid qi::os::spawnvp qi::os::system


  \fn int qi::os::system(const char *command);
    \brief Execute a shell command

    Executes a command specified in command by calling /bin/sh -c
    command, and returns after the command has been completed.

    \param command Command to execute.
    \return The value returned is -1 on error, and the return status
     of the command otherwise.
    \ingroup qios
    \since 1.12
    \see qi::os::spawnlp qi::os::spawnvp

  \fn int qi::os::waitpid(int pid, int* status);
    \brief Wait for process to change state.

    Suspends execution of the calling process until a
    child specified by pid argument has changed state.

    \param pid Pid to wait
    \param status Pointer to a buffer where the return code
     of the specified process will be stored, or NULL.
    \return rc.
      rc = 0 means that everything went well.
      rc > 0 means that an error occurs. (For instance,
             no process corresponding to the pid was
             found). The exact value is an errno code.
      rc < 0 means that the child was killed by a signal.
             The value of the signal is -rc.
    \ingroup qios
    \since 1.12
    \see qi::os::spawnlp qi::os::spawnvp

  \fn int qi::os::kill(int pid);
    \brief Send a signal to a process.

    The kill() function shall send a signal to a process or
    a group of processes specified by pid.

    \param pid Pid to kill.
    \param sig Sig to deliver. On Windows, only SIGTERM is supported.
    \return rc.
      rc = 0 means that everything went well.
      rc != 0 means that an error occurs. (For instance,
             no process corresponding to the pid was
             found).
    \ingroup qios
    \since 1.14

  \fn unsigned short qi::os::findAvailablePort(unsigned short port);
    \brief Find the first available port starting at `port`.

    \param port First port tested, then try each port after this one
                one by one.
    \return Available port or 0 on error
    \ingroup qios
    \since 1.14

  \fn bool qi::os::hostIPAddrs(std::map<std::string, std::vector<std::string>>& ifsMap);
    \brief Find all network adapters and corresponding IPs.

    \param ifsMap The key is the name of the adapter, vectors contain IPs in string.
    \return true on success or false on error
    \ingroup qios
    \since 1.14

*/
///@}




/**
\defgroup qios  qi::os
\brief cross-platform os related function. (mostly following POSIX convention) \n

\code
#include <qi/os.hpp>
\endcode

  Include POSIX compatibility support for OS not following POSIX.
  This namespace provide abstracted OS functions working on three operatrion system (Linux, MacOS, Windows) with the same behavior.

  \warning Every string MUST be encoded in UTF8 and return UTF-8.

Features:
  - change environment variables (qi::os::setenv, qi::os::getenv)
  - loading shared libraries (qi::os::dlopen, qi::os::dlsym, qi::os::dyerror, qi::os::dlclose)
  - file operations (qi::os::fopen, qi::os::stat)
  - manage processes (qi::os::spawnvp, qi::os::spawnlp, qi::os::system, qi::os::wait)
  - time (qi::os::sleep, qi::os::msleep, qi::gettimeofday)

*/
