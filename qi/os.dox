// -*- mode:c++; -*-

/**
 * \namespace qi::os
 * \brief OS abstraction layer.
 *
 * \verbatim
 * This module provides some functions following POSIX convention to manipulate
 * the operating system layer in a cross-platform way.
 *
 * .. note::
 *
 *     Every path taken in parameter *must* be encoded in UTF-8. Every path
 *     returned is encoded in UTF-8.
 * \endverbatim
 */

/**
 * \fn qi::os::dlclose(void*)
 * \brief Decrements the reference count on the dynamic library.
 * \param handle The dynamic library handle.
 * \return This function returns 0 on success, and non-zero on error.
 *
 * \verbatim
 * Decrements the reference count on the dynamic library handle. If the
 * reference count drops to zero and no other loaded library uses symbols in
 * it, then the dynamic library is unloaded.
 *
 * If there is an error you can look which one with dlerror function provided in
 * this same module.
 *
 * .. seealso:: :cpp:func:`qi::os::dlerror(void)` for more details on the error.
 *
 * .. versionadded:: 1.12
 * \endverbatim
 */

/**
 * \fn qi::os::dlerror()
 * \brief Returns a human readable string of the error code.
 * \return NULL if no error has occurred since it was last called.
 *         An human readable string otherwise.
 *
 * .. warning::
 *      On windows, return value may be modified by another function
 *      unrelated to qi::os::dlopen familly.
 *      This function does not ensure that error value is 0 at initialisation.
 *      You may reset error value before a call to any qi::os::dl{open, sym, close}
 *      functions with a first call to this function.
 *
 * \verbatim
 * Returns a human readable string describing the most recent error that
 * occurred from :cpp:func:`qi::os::dlopen(const char*, int)`,
 * :cpp:func:`qi::os::dlsym(void*, const char*)` or
 * :cpp:func:`qi::os::dlclose(void*)` since the last call to
 * :cpp:func:`qi::os::dlerror()`.
 *
 * .. versionadded:: 1.12
 * \endverbatim
 */

/**
 * \fn qi::os::dlopen(const char*, int)
 * \brief Load a dynamic library.
 * \param filename Name of the dynamic library.
 * \param flag Flags used to load the dynamic library.
 * \return A handle to the library, or 0 on error.
 *
 * \verbatim
 * Loads the dynamic library file named by the null-terminated string filename
 * and returns an opaque "handle" for the dynamic library. If filename is NULL,
 * then the returned handle is for the main program.
 *
 * No flag is supported on windows platform. Otherwise, see ``man 0p dlfcn.h``
 * for more information on flags available. If not given, ``RTLD_NOW`` is used.
 *
 * .. seealso:: :cpp:func:`qi::os::dlerror(void)` for more details on the error.
 *
 * .. versionadded:: 1.12
 * \endverbatim
 */

/**
 * \fn qi::os::dlsym(void*, const char*)
 * \brief Get the address where the symbol is loaded into memory.
 * \param handle Handle on a dynamic library returned by dlopen().
 * \param symbol The null-terminated symbol name.
 * \return The address of the symbol, or 0 on error.
 *
 * \verbatim
 * If the symbol is not found in the specified library or any of the libraries
 * that were automatically loaded by :cpp:func:`qi::os::dlopen()` when that
 * library was loaded, :cpp:func:`qi::os::dlsym()` returns 0.
 *
 * .. seealso:: :cpp:func:`qi::os::dlerror(void)` for more details on the error.
 *
 * .. versionadded:: 1.12
 * \endverbatim
 */

/**
 * \fn qi::os::findAvailablePort(unsigned short)
 * \brief Find the first available port starting at port number in parameter.
 * \param port First port tested, then each port following it is tested
 *             one by one until one available is found.
 * \return Available port or 0 on error
 *
 * \verbatim
 * .. warning::
 *
 *     This function is not thread safe and suffers from a race condition. You
 *     should avoid calling it and call listen on port 0 instead. This will pick
 *     a random port with no race condition.
 *
 * .. versionadded:: 1.14
 * \endverbatim
 */

/**
 * \fn qi::os::fopen(const char*, const char*)
 * \brief Open a file and returns and handle on it.
 * \param filename Path to the file (in UTF-8).
 * \param mode The mode.
 * \return A FILE* handle if successful, 0 on error.
 *
 * \verbatim
 * Nothing special under POSIX systems, it's only useful for Windows,
 * where files should be open using a widestring.
 *
 * Refer to ``man 3 fopen`` for more informations on POSIX systems, and to the
 * documentation of _wfopen on MSDN to understand the Windows behaviors.
 *
 * .. versionadded:: 1.12
 * \endverbatim
 */

/**
 * \fn qi::os::getMachineId()
 * \brief Returns an unique uuid for the machine.
 * \return The uuid of the machine.
 *
 * The UUID is stored on disk and will stay unchanged as long as it is not
 * removed. All programs running on the same machine will have the same UUID
 * returned. An empty string is returned on failure.
 */

/**
 * \fn qi::os::getenv(const char*)
 * \brief Get an environment variable.
 * \param var The environment variable to search for.
 * \return A pointer to the value in the environment, or an empty string if
 *         there is no match.
 *
 * \verbatim
 * Searches the  environment list to find the environment variable var, and
 * returns a pointer to the corresponding value string.
 *
 * .. versionadded:: 1.12
 * \endverbatim
 */

/**
 * \fn qi::os::gethostname()
 * \brief Get the system's hostname.
 * \return The system's hostname. An empty string is returned on failure.
 */

/**
 * \fn qi::os::getpid()
 * \brief Get the process identifier.
 */

/**
 * \fn qi::os::gettid()
 * \brief Get the thread identifier.
 */

/**
 * \fn qi::os::gettext(const std::string &)
 * \brief translate message
 * \param msgid Id of the message to be translated.
 * \return If a translation was found in one of the specified catalogs,
 *         it is converted to the locale's codeset and returned.
 *         Otherwise, msgid is returned.
 *         The resulting string is statically allocated and must
 *         not be modified or freed.
 *
 * \note The gettext, dgettext and dcgettext functions attempt to translate
 *       a text string into the user's native language, by looking up the translation
 *       in a message  catalog.
 */

/**
 * \fn qi::os::dgettext(const std::string &, const std::string &)
 * \brief translate message
 * \param msgid Id of the message to be translated.
 * \param domainname if this argument is NULL, the domain name specified
 *                   through a preceding textdomain call is used,
 *                   otherwise try to find translation into domain name.
 * \return If a translation was found in one of the specified catalogs,
 *         it is converted to the locale's codeset and returned.
 *         Otherwise, msgid is returned.
 *         The resulting string is statically allocated and must
 *         not be modified or freed.
 *
 * \note The  gettext,  dgettext  and dcgettext functions attempt to translate
 *       a text string into the user's native language, by looking up the translation
 *       in a  message catalog.
 */

/**
 * \fn qi::os::gettimeofday(qi::os::timeval*)
 * \brief The gettimeofday() function shall obtain the current time.
 * \param tp The timeval structure used to return the current time.
 * \return 0 on success
 *
 * The gettimeofday() function shall obtain the current time, expressed as
 * seconds and microseconds since the Epoch, and store it in the timeval
 * structure pointed to by tp. The resolution of the system clock is
 * unspecified. This clock is subject to NTP adjustments.
 */

/**
 * \fn qi::os::home()
 * \brief Return path to the current user's HOME.
 */

/**
 * \fn qi::os::hostIPAddrs(bool);
 * \brief Find all network adapters and corresponding IPs.
 * \param ipv6Addr Look for IPv6 addresses instead of IPv4 ones.
 * \return A map of interfaces associated with the list of IPs of that interface.
 *
 * \verbatim
 * .. versionadded:: 1.14
 * \endverbatim
 */

/**
 * \fn qi::os::kill(int, int)
 * \brief Send a signal to a process.
 * \param pid PID to kill.
 * \param sig Signal to deliver to the process.
 * \return See detailed description.
 *
 * \verbatim
 * The kill() function shall send a signal to a process or a group of processes
 * specified by pid.
 *
 * Return value (rc):
 *
 * - rc = 0 means that everything went well.
 * - rc != 0 means that an error occurred. (For instance, no process
 *   corresponding to the pid was found).
 *
 * .. versionadded:: 1.14
 * \endverbatim
 */

/**
 * \fn qi::os::mktmpdir(const char*)
 * \brief Return a writable temporary directory.
 * \param prefix Prefix of the tmp file (in UTF-8).
 * \return The path to the temporary directory.
 *
 * \verbatim
 * The caller is responsible for destroying the returned directory. This will
 * create a unique directory in the temporary directory returned by
 * :cpp:func:`qi::os::tmp()`.
 *
 * The specified prefix will be prepended to a uniquely generated name.
 *
 * .. versionadded:: 1.12.1
 * \endverbatim
 */

/**
 * \fn qi::os::msleep(unsigned int)
 * \brief Sleep for the specified number of milliseconds.
 * \param milliseconds Number of milliseconds to sleep.
 *
 * \verbatim
 * Under Linux/OSX it will not be disturbed by eventual signals sent to process.
 * Makes the calling thread sleep until millliseconds have elapsed or a signal
 * which is not ignored arrives.
 *
 * .. seealso:: :cpp:func:`qi::os::sleep(unsigned int)`
 *
 * .. versionadded:: 1.12
 * \endverbatim
 */

/**
 * \fn qi::os::setCurrentThreadName(const std::string&)
 * \brief Set the current thread name to the string in parameter.
 * \param name The new name of the current thread.
 */

/** \fn bool setCurrentThreadCPUAffinity(const std::vector<int> &cpus)
 *  \brief Set the CPU affinity for the current thread.
 *  \param cpus a vector of CPU core ids
 *  \return true on success
 *  \warning This function has no effect under Android nor OSX.
 *
 * \verbatim
 * When CPU Affinity is set, the current thread will only be allowed
 * to run on the given set of cores.
 *
 * .. versionadded:: 1.22
 * \endverbatim
 */

/**
 * \fn qi::os::setenv(const char*, const char*)
 * \brief Change or add an environment variable.
 * \param var The variable name.
 * \param value The value of the variable.
 * \return 0 on success, or -1 on error.
 *
 * \verbatim
 * Adds the variable name to the environment with the value in argument if name
 * does not already exist. Else changes its value.
 *
 * .. versionadded:: 1.12
 * \endverbatim
 */

/**
 * \fn qi::os::sleep(unsigned int)
 * \brief Sleep for the specified number of seconds.
 * \param seconds Number of seconds to sleep.
 *
 * \verbatim
 * Under Linux/OS X it will not be disturbed by eventual signals. Makes the
 * calling thread sleep until seconds have elapsed or a signal arrives which
 * is not ignored.
 *
 * .. todo::
 *     Explain the behavior of signals on windows when sleeping.
 *
 * .. seealso:: :cpp:func:`qi::os::msleep(unsigned int)`
 *
 * .. versionadded:: 1.12
 * \endverbatim
 */

/**
 * \fn qi::os::snprintf(char*, size_t, const char*, ...)
 * \brief Implement POSIX compliant snprintf.
 *
 * \verbatim
 * .. seealso:: http://en.cppreference.com/w/cpp/io/c/fprintf
 * \endverbatim
 */

/**
 * \fn qi::os::spawnlp(const char*, ...);
 * \brief Create and execute a new process.
 * \param argv Path to the file to be executed.
 * \param ... The command line arguments of the new process as var args.
 * \return -1 on error, child pid otherwise.
 *
 * \verbatim
 * Creates and executes a new process.
 *
 * .. versionadded:: 1.12
 * \endverbatim
 */

/**
 * \fn qi::os::spawnvp(char* const[]);
 * \brief Create and execute a new process.
 * \param argv The command line arguments of the new process as an array (NULL
 *             terminated).
 * \return -1 on error, child pid otherwise.
 *
 * \verbatim
 * Creates and executes a new process.
 *
 * .. versionadded:: 1.12
 * \endverbatim
 */

/**
 * \fn qi::os::stat(const char*, struct stat*)
 * \brief Get file status.
 * \param filename Path to the file (in UTF-8).
 * \param pstat A pointer to a stat structure that will be filled by the function.
 * \return 0 on success, -1 on error
 *
 * \verbatim
 * Stats the file pointed to by filename and fills in pstat.
 * You need to include <sys/stat.h> to get access to struct.
 *
 * .. todo::
 *     explain how to use stat on windows !
 *
 * .. versionadded:: 1.12
 * \endverbatim
 */

/**
 * \fn int qi::os::system(const char *command);
 * \brief Execute a shell command
 * \param command Command to execute.
 * \return The value returned is -1 on error, and the return status of the
 *         command otherwise.
 *
 * \verbatim
 * Executes a command by calling ``/bin/sh -c command``, and returns when the
 * command has completed.
 *
 * .. versionadded:: 1.12
 * \endverbatim
 */

/**
 * \fn qi::os::tmp()
 * \brief Return the system's temporary directory.
 * \return The path to the system's temporary directory.
 *
 * The directory is writable and exists. The caller is responsible for destroying
 * the temporary files it creates.
 */

/**
 * \fn qi::os::tmpdir(const char*)
 * \brief Return a temporary directory.
 * \param prefix Prefix of the tmp file (in UTF-8).
 * \return The path to the temporary directory.
 *
 * \verbatim
 * Look at :cpp:func:`qi::os::mktmpdir(const char*)`
 *
 * .. deprecated:: 1.12.1
 * \endverbatim
 */

/**
 * \fn qi::os::ustime()
 * \brief Return elapsed time since program started in microseconds.
 */

/**
 * \fn qi::os::waitpid(int pid, int* status);
 * \brief Wait for process to change state.
 * \param pid Pid to wait.
 * \param status Status returned by the process.
 * \return See detailed description.
 *
 * \verbatim
 * Suspends execution of the calling process until a child specified by pid
 * argument changes of state.
 *
 * Return values (rc):
 *
 * - rc = 0 means that everything went well.
 * - rc > 0 means that an error occurred. (For instance, no process
 *   corresponding to the pid was found). The exact value is an errno code.
 * - rc < 0 means that the child was killed by a signal. The value of the signal
 *   is -rc.
 *
 * .. versionadded:: 1.12
 * \endverbatim
 */

/**
 * \struct qi::os::timeval
 * \brief qi::os::timeval struct similar to POSIX timeval
 *
 * \var qi::os::timeval::tv_usec
 * \brief microseconds
 *
 * \var qi::os::timeval::tv_sec
 * \brief seconds
 */

/**
 * \fn qi::os::timezone();
 * \brief Return the timezone.
 * \return A string with the timezone.
 *
 * \verbatim
 * .. versionadded:: 1.22
 * \endverbatim
 */

/**
 * \fn qi::os::generateUuid()
 * \brief Generate a universally unique identifier.
 * \return The uuid.
 * .. versionadded:: 1.20
 */

/**
 * \fn qi::os::isatty(int fd);
 * \brief Test if descriptor represents a terminal
 * \return Returns a value of 1 if the given file descriptor is a terminal.
 * Otherwise returns a value of 0. By default test for stdout (1).
 *
 * \verbatim
 * .. versionadded:: 1.22
 * \endverbatim
 */
