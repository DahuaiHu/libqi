/**
 * \class qi::log::TailFileLogHandler
 * \includename{qi/log/tailfileloghandler.hpp}
 *
 * \verbatim
 * This class writes the logs to a file. When more than 1 MiB are written, it
 * moves the file to *filePath*.old, truncates *filePath*, and keeps writing
 * inside it. This means that you will get at most the last 2 MiB logged by
 * :cpp:class:`qi::log::TailFileLogHandler`.
 * \endverbatim
 */

/**
 * \fn qi::log::TailFileLogHandler::TailFileLogHandler(const std::string&)
 * \param filePath path to the file.
 *
 * \verbatim
 * .. warning::
 *
 *      If the file could not be opened, it logs a warning and every log call
 *      will silently fail.
 * \endverbatim
 */

/**
 * \fn qi::log::TailFileLogHandler::log(const qi::LogLevel, const qi::os::timeval,
 *                                      const char*, const char*, const char*,
 *                                      const char*, const int)
 * \param verb verbosity of the log message.
 * \param date date at which the log message was issued.
 * \param category will be used in future for filtering
 * \param msg message to log.
 * \param file filename in the sources from which this log message was issued.
 * \param fct function name from which this log message was issued.
 * \param line line number in the issuer file.
 *
 * If the file could not be opened, this function will silently fail, otherwise
 * it will directly write the log message to the file and flush its output. see
 * detailed description for more details on what "tail" means.
 */
