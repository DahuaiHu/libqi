// -*- mode:c++; -*-

/**
 * \file macro.hpp
 * \brief Various macros for qi. (deprecated, export API, disallow copy, ..)
 *
 * \verbatim
 * This header file contains various macros for qi.
 *
 * - import/export symbol (:cpp:macro:`QI_IMPORT_API`,
 *   :cpp:macro:`QI_EXPORT_API`)
 * - mark function and header as deprecated (:cpp:macro:`QI_DEPRECATED_HEADER`,
 *   :cpp:macro:`QI_API_DEPRECATED`)
 * - generate compiler warning (:cpp:macro:`QI_COMPILER_WARNING`)
 * - disallow copy and assign (:cpp:macro:`QI_DISALLOW_COPY_AND_ASSIGN`)
 * \endverbatim
 */

/**
 * \def QI_DEPRECATED_HEADER(x)
 * \brief Generate a compiler warning stating a header is deprecated.
 */

/**
 * \def QI_COMPILER_WARNING(x)
 * \brief Generate a compiler warning.
 * \param x The string displayed as the warning.
 */

/**
 * \def QI_API_DEPRECATED
 * \brief Compiler flags to mark a function as deprecated. It will generate a
 *        compiler warning.
 */

/**
 * \def QI_IMPORT_API
 * \brief Compiler flags to import a function or a class.
 */

/**
 * \def QI_EXPORT_API
 * \brief Compiler flags to export a function or a class.
 */

/**
 * \def QI_DEPRECATE_MACRO(name)
 * \brief A macro used to deprecate another macro. Generate a compiler warning
 * when the given macro is used.
 * \param name The name of the macro.
 * \verbatim
 * Example:
 *
 * .. code-block:: cpp
 *
 *     #define MAX(x,y)(QI_DEPRECATE_MACRO(MAX), x > y ?  x : y)
 * \endverbatim
 */

/**
 * \def QI_DISALLOW_COPY_AND_ASSIGN(type)
 * \deprecated Use boost::noncopyable instead
 * \verbatim
 * Example:
 *
 * .. code-block:: cpp
 *
 *     class Foo : private boost::nonpyable
 *     {};
 * \endverbatim
 * \brief A macro to disallow copy constructor and operator=
 * \param type The class name of which we want to forbid copy.
 *
 * \verbatim
 * .. note::
 *     This macro should always be in the private (or protected) section of a
 *     class.
 *
 * Example:
 *
 * .. code-block:: cpp
 *
 *     class Foo {
 *         Foo();
 *     private:
 *         QI_DISALLOW_COPY_AND_ASSIGN(Foo);
 *     };
 * \endverbatim
 */

/**
 * \def QI_UNUSED(x)
 * \brief This macro tags a parameter as unused.
 *
 * \verbatim
 * Example:
 *
 * .. code-block:: cpp
 *
 *     int zero(int QI_UNUSED(x))
 *     {
 *         return 0;
 *     }
 * \endverbatim
 */
