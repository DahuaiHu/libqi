#from codegenerator import *
<%
def generate_argpush_list(count):
    t = "args.push_back(p%(count)d);"
    return generate_list(t, count, sep=" ")
%>
/*
** $autogen
**
** Author(s):
**  - Cedric GESTES <gestes@aldebaran-robotics.com>
**
** Copyright (C) 2010 Aldebaran Robotics
*/

#raw
#ifndef  QI_MESSAGING_CALL_FUNCTOR_HPP_
# define QI_MESSAGING_CALL_FUNCTOR_HPP_

#include <qi/functors/functor.hpp>
#end raw

namespace qi
{
#for $i in $count

  template <typename R$generate_typename_list($i, begin = True)>
  R callFunctor(Functor *f$generate_param_list($i, begin = True)) {
    qi::serialization::SerializedData args;
    qi::serialization::SerializedData ret;

    #for $j in range($i)
    args.write<P$j>(p$j);
    #end for
    f->call(args, ret);
    R r;
    ret.read<R>(r);
    return r;
  }

  #if $i != 0
  template <$generate_typename_list($i)>
  #end if
  void callVoidFunctor(Functor *f$generate_param_list($i, begin = True)) {
    qi::serialization::SerializedData args;
    qi::serialization::SerializedData ret;

    #for $j in range($i)
    args.write<P$j>(p$j);
    #end for
    f->call(args, ret);
  }

#end for
#raw
}
#endif
#end raw
