/*
** AUTOGENERATED CODE, DO NOT EDIT
**
** Author(s):
**  - Cedric GESTES <gestes@aldebaran-robotics.com>
**
** Copyright (C) 2010 Aldebaran Robotics
*/

#ifndef   __QI_FUNCTORS_MAKEFUNCTOR_HPP_IN__
#define   __QI_FUNCTORS_MAKEFUNCTOR_HPP_IN__

#include <qi/functors/functor.hpp>

namespace qi
{

  template <typename C, typename R>
  Functor *makeFunctor(C *obj, R (C::*f) ()) {
    return new detail::MemberFunctor_0<C, R>(obj, f);
  }

  template <typename R>
  Functor *makeFunctor(R (*f) ()) {
    return new detail::Functor_0<R>(f);
  }


  template <typename P0, typename C, typename R>
  Functor *makeFunctor(C *obj, R (C::*f) (const P0 &p0)) {
    return new detail::MemberFunctor_1<P0, C, R>(obj, f);
  }

  template <typename P0, typename R>
  Functor *makeFunctor(R (*f) (const P0 &p0)) {
    return new detail::Functor_1<P0, R>(f);
  }


  template <typename P0, typename P1, typename C, typename R>
  Functor *makeFunctor(C *obj, R (C::*f) (const P0 &p0, const P1 &p1)) {
    return new detail::MemberFunctor_2<P0, P1, C, R>(obj, f);
  }

  template <typename P0, typename P1, typename R>
  Functor *makeFunctor(R (*f) (const P0 &p0, const P1 &p1)) {
    return new detail::Functor_2<P0, P1, R>(f);
  }


  template <typename P0, typename P1, typename P2, typename C, typename R>
  Functor *makeFunctor(C *obj, R (C::*f) (const P0 &p0, const P1 &p1, const P2 &p2)) {
    return new detail::MemberFunctor_3<P0, P1, P2, C, R>(obj, f);
  }

  template <typename P0, typename P1, typename P2, typename R>
  Functor *makeFunctor(R (*f) (const P0 &p0, const P1 &p1, const P2 &p2)) {
    return new detail::Functor_3<P0, P1, P2, R>(f);
  }


  template <typename P0, typename P1, typename P2, typename P3, typename C, typename R>
  Functor *makeFunctor(C *obj, R (C::*f) (const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3)) {
    return new detail::MemberFunctor_4<P0, P1, P2, P3, C, R>(obj, f);
  }

  template <typename P0, typename P1, typename P2, typename P3, typename R>
  Functor *makeFunctor(R (*f) (const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3)) {
    return new detail::Functor_4<P0, P1, P2, P3, R>(f);
  }


  template <typename P0, typename P1, typename P2, typename P3, typename P4, typename C, typename R>
  Functor *makeFunctor(C *obj, R (C::*f) (const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4)) {
    return new detail::MemberFunctor_5<P0, P1, P2, P3, P4, C, R>(obj, f);
  }

  template <typename P0, typename P1, typename P2, typename P3, typename P4, typename R>
  Functor *makeFunctor(R (*f) (const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4)) {
    return new detail::Functor_5<P0, P1, P2, P3, P4, R>(f);
  }


  template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename C, typename R>
  Functor *makeFunctor(C *obj, R (C::*f) (const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5)) {
    return new detail::MemberFunctor_6<P0, P1, P2, P3, P4, P5, C, R>(obj, f);
  }

  template <typename P0, typename P1, typename P2, typename P3, typename P4, typename P5, typename R>
  Functor *makeFunctor(R (*f) (const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4, const P5 &p5)) {
    return new detail::Functor_6<P0, P1, P2, P3, P4, P5, R>(f);
  }

}
#endif // __QI_FUNCTORS_MAKEFUNCTOR_HPP_IN__
