#!/usr/bin/env python
##
## Author(s):
##  - Cedric GESTES <gestes@aldebaran-robotics.com>
##
## Copyright (C) 2010 Aldebaran Robotics
##

#TypeNameList : typename P0, typename P1, ...
#TypeList     : P0, P1, ...
#ArgList      : const P0 &p0, const P1 & p1, ...
#ParamList    : p0, p1, ..
#CallParamList: pParams.getParameters()[0].as<P0>(), ...
#count        : 6

def read_file(fname):
    header   = ""
    footer   = ""
    template = ""
    mode = 0
    with open(fname, "r") as f:
        for line in f:
            stripped = line.strip("\r\n\t ")
            if stripped == "//HEADER":
                mode = 1
                continue
            if stripped == "//FOOTER":
                mode = 2
                continue
            if mode == 0:
                header += line
            elif mode == 1:
                template += line
            elif mode == 2:
                footer += line
    return (header, template, footer)

def generate_list(tpl, count, sep = ", ", begin = False, end = False):
    result = ""
    if begin and count:
        result += sep
    for i in range(count):
        result += tpl % { 'count' : i }
        if i != count - 1 or end:
            result += sep
    return result

def generate_callparam_list(count):
    t = "params[%(count)d].as<P%(count)d>()"
    return generate_list(t, count)

def generate_typename_list(count):
    t = "typename P%(count)d"
    return generate_list(t, count)

def generate_typename_sep_list(count):
    t = "typename P%(count)d"
    return generate_list(t, count, end = True)

def generate_sep_typename_list(count):
    t = "typename P%(count)d"
    return generate_list(t, count, begin = True)

def generate_type_list(count):
    t = "P%(count)d"
    return generate_list(t, count)

def generate_type_sep_list(count):
    t = "P%(count)d"
    return generate_list(t, count, end = True)

def generate_param_list(count):
    t = "const P%(count)d &p%(count)d"
    return generate_list(t, count)

def generate_sep_param_list(count):
    t = "const P%(count)d &p%(count)d"
    print "BIM:", generate_list(t, count, begin = True)
    return generate_list(t, count, begin = True)

def generate_arg_list(count):
    t = "p%(count)d"
    return generate_list(t, count)

def generate_argpush_list(count):
    t = "args.push_back(p%(count)d);"
    return generate_list(t, count, sep=" ")

def generate_code(head, tpl, foot, count):
    result  = "//AUTOGENERATED HEADER DO NOT EDIT\n"
    result += head
    for i in range(count):
        result += tpl % { 'count'           : i,
                          'TypeNameList'    : generate_typename_list(i),
                          'TypeList'        : generate_type_list(i),
                          'SepTypeNameList' : generate_sep_typename_list(i),
                          'TypeNameListSep' : generate_typename_sep_list(i),
                          'TypeListSep'     : generate_type_sep_list(i),
                          'ParamList'       : generate_param_list(i),
                          'SepParamList'    : generate_sep_param_list(i),
                          'ArgList'         : generate_arg_list(i),
                          'ArgsPushList'    : generate_argpush_list(i),
                          'CallParamList'   : generate_callparam_list(i),
                          }
    result += foot
    return result

def generate_file(src, dst):
    (head, tpl, foot) = read_file(src)
    code = generate_code(head, tpl, foot, 7)
    with open(dst, "w") as f:
        f.write(code)

if __name__ == "__main__":
    generate_file("memberfunctor.hxx.in"    , "memberfunctor.hxx")
    generate_file("voidmemberfunctor.hxx.in", "voidmemberfunctor.hxx")
    generate_file("functor.hxx.in"          , "functor.hxx")
    generate_file("voidfunctor.hxx.in"      , "voidfunctor.hxx")
    generate_file("makefunctor.hpp.in"      , "makefunctor.hpp")
    generate_file("callfunctor.hpp.in"      , "callfunctor.hpp")
