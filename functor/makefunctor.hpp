/*
** Author(s):
**  - Cedric GESTES <gestes@aldebaran-robotics.com>
**
** Copyright (C) 2010 Aldebaran Robotics
*/

//AUTOGENERATED HEADER DO NOT EDIT

#ifndef  AL_MESSAGING_MAKE_FUNCTOR_HPP_
# define AL_MESSAGING_MAKE_FUNCTOR_HPP_

#include <alcommon-ng/functor/functor.hpp>

namespace AL
{

  template <typename C, typename R>
  Functor *makeFunctor(C *obj, R (C::*f) ()) {
    return new MemFunctor_0<C, R>(obj, f);
  }


  template <typename P0, typename C, typename R>
  Functor *makeFunctor(C *obj, R (C::*f) (const P0 &p0)) {
    return new MemFunctor_1<P0, C, R>(obj, f);
  }


  template <typename P0, typename P1, typename C, typename R>
  Functor *makeFunctor(C *obj, R (C::*f) (const P0 &p0, const P1 &p1)) {
    return new MemFunctor_2<P0, P1, C, R>(obj, f);
  }


  template <typename P0, typename P1, typename P2, typename C, typename R>
  Functor *makeFunctor(C *obj, R (C::*f) (const P0 &p0, const P1 &p1, const P2 &p2)) {
    return new MemFunctor_3<P0, P1, P2, C, R>(obj, f);
  }


  template <typename P0, typename P1, typename P2, typename P3, typename C, typename R>
  Functor *makeFunctor(C *obj, R (C::*f) (const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3)) {
    return new MemFunctor_4<P0, P1, P2, P3, C, R>(obj, f);
  }


  template <typename P0, typename P1, typename P2, typename P3, typename P4, typename C, typename R>
  Functor *makeFunctor(C *obj, R (C::*f) (const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4)) {
    return new MemFunctor_5<P0, P1, P2, P3, P4, C, R>(obj, f);
  }

}
#endif
