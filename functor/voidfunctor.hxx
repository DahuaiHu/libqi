//AUTOGENERATED HEADER DO NOT EDIT
/*
** Author(s):
**  - Cedric GESTES <gestes@aldebaran-robotics.com>
**
** Copyright (C) 2010 Aldebaran Robotics
*/

#ifndef I_WANT_HXX
#error "do not include hxx in your code"
#endif

#ifndef  AL_MESSAGING_VOID_FUNCTOR_HXX_
# define AL_MESSAGING_VOID_FUNCTOR_HXX_

# include <alcommon-ng/functor/functor.hpp>

namespace AL
{

  template<>
  class Functor_0<void> : public Functor
  {
  public:
    typedef void(*FunctionType) ();

    Functor_0(FunctionType pFunction)
      : fFunction(pFunction)
    {}

    void operator()() {
      (*fFunction)();
    }

    void call(const AL::Messaging::CallDefinition &params, AL::Messaging::ResultDefinition&) {
      AL_FUNCTOR_ASSUME_NBR_PARAMS(pParams, 0);
      (*fFunction)();
    };

  private:
    FunctionType  fFunction;
  };


  template<typename P0>
  class Functor_1<P0, void> : public Functor
  {
  public:
    typedef void(*FunctionType) (const P0 &p0);

    Functor_1(FunctionType pFunction)
      : fFunction(pFunction)
    {}

    void operator()(const P0 &p0) {
      (*fFunction)(p0);
    }

    void call(const AL::Messaging::CallDefinition &params, AL::Messaging::ResultDefinition&) {
      AL_FUNCTOR_ASSUME_NBR_PARAMS(pParams, 1);
      (*fFunction)(params.args()[0].as<P0>());
    };

  private:
    FunctionType  fFunction;
  };


  template<typename P0, typename P1>
  class Functor_2<P0, P1, void> : public Functor
  {
  public:
    typedef void(*FunctionType) (const P0 &p0, const P1 &p1);

    Functor_2(FunctionType pFunction)
      : fFunction(pFunction)
    {}

    void operator()(const P0 &p0, const P1 &p1) {
      (*fFunction)(p0, p1);
    }

    void call(const AL::Messaging::CallDefinition &params, AL::Messaging::ResultDefinition&) {
      AL_FUNCTOR_ASSUME_NBR_PARAMS(pParams, 2);
      (*fFunction)(params.args()[0].as<P0>(), params.args()[1].as<P1>());
    };

  private:
    FunctionType  fFunction;
  };


  template<typename P0, typename P1, typename P2>
  class Functor_3<P0, P1, P2, void> : public Functor
  {
  public:
    typedef void(*FunctionType) (const P0 &p0, const P1 &p1, const P2 &p2);

    Functor_3(FunctionType pFunction)
      : fFunction(pFunction)
    {}

    void operator()(const P0 &p0, const P1 &p1, const P2 &p2) {
      (*fFunction)(p0, p1, p2);
    }

    void call(const AL::Messaging::CallDefinition &params, AL::Messaging::ResultDefinition&) {
      AL_FUNCTOR_ASSUME_NBR_PARAMS(pParams, 3);
      (*fFunction)(params.args()[0].as<P0>(), params.args()[1].as<P1>(), params.args()[2].as<P2>());
    };

  private:
    FunctionType  fFunction;
  };


  template<typename P0, typename P1, typename P2, typename P3>
  class Functor_4<P0, P1, P2, P3, void> : public Functor
  {
  public:
    typedef void(*FunctionType) (const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3);

    Functor_4(FunctionType pFunction)
      : fFunction(pFunction)
    {}

    void operator()(const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3) {
      (*fFunction)(p0, p1, p2, p3);
    }

    void call(const AL::Messaging::CallDefinition &params, AL::Messaging::ResultDefinition&) {
      AL_FUNCTOR_ASSUME_NBR_PARAMS(pParams, 4);
      (*fFunction)(params.args()[0].as<P0>(), params.args()[1].as<P1>(), params.args()[2].as<P2>(), params.args()[3].as<P3>());
    };

  private:
    FunctionType  fFunction;
  };


  template<typename P0, typename P1, typename P2, typename P3, typename P4>
  class Functor_5<P0, P1, P2, P3, P4, void> : public Functor
  {
  public:
    typedef void(*FunctionType) (const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4);

    Functor_5(FunctionType pFunction)
      : fFunction(pFunction)
    {}

    void operator()(const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4) {
      (*fFunction)(p0, p1, p2, p3, p4);
    }

    void call(const AL::Messaging::CallDefinition &params, AL::Messaging::ResultDefinition&) {
      AL_FUNCTOR_ASSUME_NBR_PARAMS(pParams, 5);
      (*fFunction)(params.args()[0].as<P0>(), params.args()[1].as<P1>(), params.args()[2].as<P2>(), params.args()[3].as<P3>(), params.args()[4].as<P4>());
    };

  private:
    FunctionType  fFunction;
  };

}
#endif
