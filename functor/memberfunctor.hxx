//AUTOGENERATED HEADER DO NOT EDIT
/*
** Author(s):
**  - Cedric GESTES <gestes@aldebaran-robotics.com>
**
** Copyright (C) 2010 Aldebaran Robotics
*/

#ifndef I_WANT_HXX
#error("do not include hxx in your code")
#endif

#ifndef  AL_MESSAGING_MEMBER_FUNCTOR_HXX_
# define AL_MESSAGING_MEMBER_FUNCTOR_HXX_

# include <alcommon-ng/functor/functor.hpp>

namespace AL
{

  template <typename C, typename R>
  class MemberFunctor_0 : public Functor
  {
  public:
    typedef R(C::*FunctionType) ();

    MemberFunctor_0(C *pObject, FunctionType pFunction)
      : fObject(pObject),
        fFunction(pFunction)
    {}

    R operator()() {
      return (R)(fObject->*fFunction)();
    }

    void call(const AL::Messaging::ArgumentList &params, AL::Messaging::ReturnValue& result) {
      AL_FUNCTOR_ASSUME_NBR_PARAMS(pParams, 0);
      result.value((fObject->*fFunction)());
    };

  private:
    C            *fObject;
    FunctionType  fFunction;
  };


  template <typename P0, typename C, typename R>
  class MemberFunctor_1 : public Functor
  {
  public:
    typedef R(C::*FunctionType) (const P0 &p0);

    MemberFunctor_1(C *pObject, FunctionType pFunction)
      : fObject(pObject),
        fFunction(pFunction)
    {}

    R operator()(const P0 &p0) {
      return (R)(fObject->*fFunction)(p0);
    }

    void call(const AL::Messaging::ArgumentList &params, AL::Messaging::ReturnValue& result) {
      AL_FUNCTOR_ASSUME_NBR_PARAMS(pParams, 1);
      result.value((fObject->*fFunction)(params[0].as<P0>()));
    };

  private:
    C            *fObject;
    FunctionType  fFunction;
  };


  template <typename P0, typename P1, typename C, typename R>
  class MemberFunctor_2 : public Functor
  {
  public:
    typedef R(C::*FunctionType) (const P0 &p0, const P1 &p1);

    MemberFunctor_2(C *pObject, FunctionType pFunction)
      : fObject(pObject),
        fFunction(pFunction)
    {}

    R operator()(const P0 &p0, const P1 &p1) {
      return (R)(fObject->*fFunction)(p0, p1);
    }

    void call(const AL::Messaging::ArgumentList &params, AL::Messaging::ReturnValue& result) {
      AL_FUNCTOR_ASSUME_NBR_PARAMS(pParams, 2);
      result.value((fObject->*fFunction)(params[0].as<P0>(), params[1].as<P1>()));
    };

  private:
    C            *fObject;
    FunctionType  fFunction;
  };


  template <typename P0, typename P1, typename P2, typename C, typename R>
  class MemberFunctor_3 : public Functor
  {
  public:
    typedef R(C::*FunctionType) (const P0 &p0, const P1 &p1, const P2 &p2);

    MemberFunctor_3(C *pObject, FunctionType pFunction)
      : fObject(pObject),
        fFunction(pFunction)
    {}

    R operator()(const P0 &p0, const P1 &p1, const P2 &p2) {
      return (R)(fObject->*fFunction)(p0, p1, p2);
    }

    void call(const AL::Messaging::ArgumentList &params, AL::Messaging::ReturnValue& result) {
      AL_FUNCTOR_ASSUME_NBR_PARAMS(pParams, 3);
      result.value((fObject->*fFunction)(params[0].as<P0>(), params[1].as<P1>(), params[2].as<P2>()));
    };

  private:
    C            *fObject;
    FunctionType  fFunction;
  };


  template <typename P0, typename P1, typename P2, typename P3, typename C, typename R>
  class MemberFunctor_4 : public Functor
  {
  public:
    typedef R(C::*FunctionType) (const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3);

    MemberFunctor_4(C *pObject, FunctionType pFunction)
      : fObject(pObject),
        fFunction(pFunction)
    {}

    R operator()(const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3) {
      return (R)(fObject->*fFunction)(p0, p1, p2, p3);
    }

    void call(const AL::Messaging::ArgumentList &params, AL::Messaging::ReturnValue& result) {
      AL_FUNCTOR_ASSUME_NBR_PARAMS(pParams, 4);
      result.value((fObject->*fFunction)(params[0].as<P0>(), params[1].as<P1>(), params[2].as<P2>(), params[3].as<P3>()));
    };

  private:
    C            *fObject;
    FunctionType  fFunction;
  };


  template <typename P0, typename P1, typename P2, typename P3, typename P4, typename C, typename R>
  class MemberFunctor_5 : public Functor
  {
  public:
    typedef R(C::*FunctionType) (const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4);

    MemberFunctor_5(C *pObject, FunctionType pFunction)
      : fObject(pObject),
        fFunction(pFunction)
    {}

    R operator()(const P0 &p0, const P1 &p1, const P2 &p2, const P3 &p3, const P4 &p4) {
      return (R)(fObject->*fFunction)(p0, p1, p2, p3, p4);
    }

    void call(const AL::Messaging::ArgumentList &params, AL::Messaging::ReturnValue& result) {
      AL_FUNCTOR_ASSUME_NBR_PARAMS(pParams, 5);
      result.value((fObject->*fFunction)(params[0].as<P0>(), params[1].as<P1>(), params[2].as<P2>(), params[3].as<P3>(), params[4].as<P4>()));
    };

  private:
    C            *fObject;
    FunctionType  fFunction;
  };

}
#endif
