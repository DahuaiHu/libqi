#!/usr/bin/env python
##
## Author(s):
##  - Cedric GESTES <gestes@aldebaran-robotics.com>
##
## Copyright (C) 2010 Aldebaran Robotics
##

import os.path
from Cheetah.Template import Template

def generate_list(tpl, count, sep = ", ", begin = False, end = False):
    result = ""
    if begin and count:
        result += sep
    for i in range(count):
        result += tpl % { 'count' : i }
        if i != count - 1 or end:
            result += sep
    return result

def generate_callparam_list(count):
    t = "params[%(count)d].as<P%(count)d>()"
    return generate_list(t, count)

def generate_typename_list(count, begin = False, end = False):
    t = "typename P%(count)d"
    return generate_list(t, count, begin=begin, end=end)

def generate_type_list(count, begin = False, end = False):
    t = "P%(count)d"
    return generate_list(t, count, begin=begin, end=end)

def generate_param_list(count, begin = False, end = False):
    t = "const P%(count)d &p%(count)d"
    return generate_list(t, count, begin=begin, end=end)

def generate_arg_list(count, begin = False, end = False):
    t = "p%(count)d"
    return generate_list(t, count, begin=begin, end=end)

def generate_argpush_list(count):
    t = "args.push_back(p%(count)d);"
    return generate_list(t, count, sep=" ")


def generate_file(src, dst, count):
    code = Template(file = src, searchList = [ { 'count': range(count),
                                                 'autogen' : "AUTOGENERATED CODE, DO NOT EDIT" }])
    with open(dst, "w") as f:
        f.write(str(code))

if __name__ == "__main__":
    generate_file("functionsignature.hpp.in", "functionsignature.hpp", 7)
    generate_file("memberfunctor.hxx.in"    , "memberfunctor.hxx"    , 7)
    generate_file("voidmemberfunctor.hxx.in", "voidmemberfunctor.hxx", 7)
    generate_file("functor.hxx.in"          , "functor.hxx"          , 7)
    generate_file("voidfunctor.hxx.in"      , "voidfunctor.hxx"      , 7)
    generate_file("makefunctor.hpp.in"      , "makefunctor.hpp"      , 7)
    generate_file("callfunctor.hpp.in"      , "callfunctor.hpp"      , 7)
    generate_file("../common/client_node.hpp.in"      , "../common/client_node.hpp"      , 7)
    generate_file("../common/client_node.hxx.in"      , "../common/client_node.hxx"      , 7)
